import React, { createContext, useContext, useEffect, useRef, useState, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';

interface SocketContextType {
  socket: Socket | null;
  isConnected: boolean;
  connected: boolean;
  connectionAttempts: number;
  joinRoom: (roomName: string) => void;
  leaveRoom: (roomName: string) => void;
  disconnect: () => void;
  reconnect: () => void;
  on: (event: string, handler: (data: any) => void) => void;
  off: (event: string, handler: (data: any) => void) => void;
  emit: (event: string, data?: any) => void;
}

const SocketContext = createContext<SocketContextType | undefined>(undefined);

interface SocketProviderProps {
  children: React.ReactNode;
  serverUrl?: string;
  autoConnect?: boolean;
}

export const SocketProvider: React.FC<SocketProviderProps> = ({
  children,
  serverUrl = 'http://localhost:5000',
  autoConnect = true,
}) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [connectionAttempts, setConnectionAttempts] = useState(0);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const maxReconnectAttempts = 5;
  const reconnectDelay = 3000;

  const createSocket = useCallback(() => {
    console.log('üîå –°–æ–∑–¥–∞–Ω–∏–µ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...', serverUrl);
    
    const newSocket = io(serverUrl, {
      autoConnect: false,
      reconnection: true, // –ú—ã —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      timeout: 10000,
      transports: ['websocket', 'polling'],
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    newSocket.on('connect', () => {
      console.log('‚úÖ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω:', newSocket.id);
      setIsConnected(true);
      setConnectionAttempts(0);
    });

    newSocket.on('disconnect', (reason) => {
      console.log('‚ùå Socket.IO –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      setIsConnected(false);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      if (reason === 'io server disconnect') {
        // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        console.log('üîÑ –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        scheduleReconnect();
      } else if (reason === 'transport close' || reason === 'transport error') {
        console.log('üîÑ –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        scheduleReconnect();
      }
    });

    newSocket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO:', error);
      setIsConnected(false);
      scheduleReconnect();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    newSocket.on('materialCreated', (data) => {
      console.log('üì¶ –ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω:', data);
      // –°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ MaterialsSocketHandler
    });

    newSocket.on('materialUpdated', (data) => {
      console.log('üìù –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', data);
    });

    newSocket.on('materialDeleted', (data) => {
      console.log('üóëÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω:', data);
    });

    newSocket.on('materialLinkedToGroup', (data) => {
      console.log('üîó –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ:', data);
    });

    newSocket.on('materialUnlinkedFromGroup', (data) => {
      console.log('üîì –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≥—Ä—É–ø–ø—ã:', data);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    newSocket.on('materialGroupCreated', (data) => {
      console.log('üìÅ –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∞:', data);
    });

    newSocket.on('materialGroupUpdated', (data) => {
      console.log('üìù –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
    });

    newSocket.on('materialGroupDeleted', (data) => {
      console.log('üóëÔ∏è –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É–¥–∞–ª–µ–Ω–∞:', data);
    });

    return newSocket;
  }, [serverUrl]);

  const scheduleReconnect = useCallback(() => {
    if (connectionAttempts >= maxReconnectAttempts) {
      console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }

    const delay = reconnectDelay * Math.pow(1.5, connectionAttempts);
    console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${connectionAttempts + 1}/${maxReconnectAttempts})`);

    reconnectTimeoutRef.current = setTimeout(() => {
      setConnectionAttempts(prev => prev + 1);
      if (socket) {
        socket.connect();
      }
    }, delay);
  }, [connectionAttempts, socket]);

  const joinRoom = useCallback((roomName: string) => {
    if (socket && isConnected) {
      console.log('üè† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomName);
      socket.emit(roomName);
    } else {
      console.warn('‚ö†Ô∏è Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomName);
    }
  }, [socket, isConnected]);

  const leaveRoom = useCallback((roomName: string) => {
    if (socket && isConnected) {
      console.log('üö™ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã:', roomName);
      socket.emit(`leave${roomName.charAt(0).toUpperCase() + roomName.slice(1)}`);
    }
  }, [socket, isConnected]);

  const disconnect = useCallback(() => {
    console.log('üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Socket.IO');
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }
    if (socket) {
      socket.disconnect();
    }
    setIsConnected(false);
    setConnectionAttempts(0);
  }, [socket]);

  const reconnect = useCallback(() => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Socket.IO');
    setConnectionAttempts(0);
    if (socket) {
      socket.connect();
    }
  }, [socket]);

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  const on = useCallback((event: string, handler: (data: any) => void) => {
    if (socket) {
      socket.on(event, handler);
    }
  }, [socket]);

  const off = useCallback((event: string, handler: (data: any) => void) => {
    if (socket) {
      socket.off(event, handler);
    }
  }, [socket]);

  const emit = useCallback((event: string, data?: any) => {
    if (socket && isConnected) {
      socket.emit(event, data);
    }
  }, [socket, isConnected]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (autoConnect) {
      const newSocket = createSocket();
      setSocket(newSocket);
      newSocket.connect();

      return () => {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        if (reconnectTimeoutRef.current) {
          clearTimeout(reconnectTimeoutRef.current);
        }
        newSocket.disconnect();
      };
    }
  }, [createSocket, autoConnect]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (socket && isConnected) {
      console.log('üè† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–ΩÔøΩÔøΩ–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
      joinRoom('joinMaterialsRoom');
      joinRoom('joinMaterialGroupsRoom');
    }
  }, [socket, isConnected, joinRoom]);

  const contextValue: SocketContextType = {
    socket,
    isConnected,
    connected: isConnected, // –î–æ–±–∞–≤–ª—è–µ–º connected –∫–∞–∫ alias –¥–ª—è isConnected
    connectionAttempts,
    joinRoom,
    leaveRoom,
    disconnect,
    reconnect,
    on,
    off,
    emit,
  };

  return (
    <SocketContext.Provider value={contextValue}>
      {children}
    </SocketContext.Provider>
  );
};

export const useSocket = (): SocketContextType => {
  const context = useContext(SocketContext);
  if (context === undefined) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
};