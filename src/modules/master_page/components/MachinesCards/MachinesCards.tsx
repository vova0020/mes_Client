import React from 'react';
import styles from './MachinesCards.module.css';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω–∫–µ
interface MachineData {
  id: string;
  name: string;
  status: 'active' | 'inactive' | 'maintenance' | 'broken';
  currentOrder?: string;
  efficiency: number;
  // –ù–æ–≤—ã–µ –ø–æ–ª—è
  productionRate?: number; // –ù–æ—Ä–º–∞ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
  plannedAmount?: number; // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
  completedAmount?: number; // –í—ã–ø–æ–ª–Ω–µ–Ω–æ
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const demoMachines: MachineData[] = [
  {
    id: 'machine-001',
    name: '–°—Ç–∞–Ω–æ–∫ –ß–ü–£ #1',
    status: 'active',
    currentOrder: 'ORD-2023-001',
    efficiency: 87,
    productionRate: 100,
    plannedAmount: 80,
    completedAmount: 45
  },
  {
    id: 'machine-002',
    name: '–§—Ä–µ–∑–µ—Ä–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ #2',
    status: 'maintenance',
    efficiency: 0,
    productionRate: 0,
    plannedAmount: 0,
    completedAmount: 0
  },
  {
    id: 'machine-003',
    name: '–¢–æ–∫–∞—Ä–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ #3',
    status: 'inactive',
    efficiency: 0,
    productionRate: 0,
    plannedAmount: 0,
    completedAmount: 0
  },
  {
    id: 'machine-004',
    name: '–®–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ #4',
    status: 'active',
    efficiency: 92,
    productionRate: 120,
    plannedAmount: 100,
    completedAmount: 78
  },
  {
    id: 'machine-005',
    name: '–°–≤–µ—Ä–ª–∏–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ #5',
    status: 'broken',
    efficiency: 0,
    productionRate: 0,
    plannedAmount: 0,
    completedAmount: 0
  }
];

const MachinesCards: React.FC = () => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ API
  const machines = demoMachines;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusClass = (status: string): string => {
    switch (status) {
      case 'active':
        return styles.statusActive;
      case 'inactive':
        return styles.statusInactive;
      case 'maintenance':
        return styles.statusMaintenance;
      case 'broken':
        return styles.statusBroken;
      default:
        return '';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const getStatusText = (status: string): string => {
    switch (status) {
      case 'active':
        return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'inactive':
        return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      case 'maintenance':
        return '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
      case 'broken':
        return '–°–ª–æ–º–∞–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã
  const calculateCompletionPercentage = (completed: number = 0, rate: number = 1): number => {
    if (rate === 0) return 0;
    return Math.min(Math.round((completed / rate) * 100), 100);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
  const handleOpenTask = (machineId: string) => {
    console.log(`–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machineId}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
  const renderInactiveOverlay = () => (
    <div className={styles.inactiveOverlay}>
      <div className={styles.inactiveIcon}>‚è∏</div>
      <div className={styles.inactiveMessage}>–°—Ç–∞–Ω–æ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</div>
    </div>
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è —Å—Ç–∞–Ω–∫–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
  const renderMaintenanceOverlay = () => (
    <div className={styles.maintenanceOverlay}>
      <div className={styles.maintenanceIcon}>üîß</div>
      <div className={styles.maintenanceMessage}>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</div>
    </div>
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
  const renderBrokenOverlay = () => (
    <div className={styles.brokenOverlay}>
      <div className={styles.brokenIcon}>‚ö†Ô∏è</div>
      <div className={styles.brokenMessage}>–°—Ç–∞–Ω–æ–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω</div>
    </div>
  );

  return (
    <div className={styles.detailsContainer}>
      <h2 className={styles.title}>–°–¢–ê–ù–ö–ò</h2>
      
      <div className={styles.tableContainer}>
        <div className={styles.cardsWrapper}>
          {machines.map(machine => (
            <div 
              key={machine.id} 
              className={styles.machineCard}
              data-status={machine.status}
            >
              <div className={styles.cardHeader}>
                <h3 className={styles.machineName}>{machine.name}</h3>
                <div className={`${styles.statusIndicator} ${getStatusClass(machine.status)}`}>
                  {getStatusText(machine.status)}
                </div>
              </div>
              
              <div className={styles.cardBody}>
                {machine.currentOrder && (
                  <div className={styles.infoRow}>
                    <span className={styles.infoLabel}>–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:</span>
                    <span className={styles.infoValue}>{machine.currentOrder}</span>
                  </div>
                )}
                
                {machine.status === 'active' && (
                  <>
                    <div className={styles.infoRow}>
                      <span className={styles.infoLabel}>–ù–æ—Ä–º–∞ –≤—ã—Ä–∞–±–æ—Ç–∫–∏:</span>
                      <span className={styles.infoValue}>{machine.productionRate} —à—Ç.</span>
                    </div>
                    
                    <div className={styles.infoRow}>
                      <span className={styles.infoLabel}>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</span>
                      <span className={styles.infoValue}>{machine.plannedAmount} —à—Ç.</span>
                    </div>
                    
                    <div className={styles.infoRow}>
                      <span className={styles.infoLabel}>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</span>
                      <span className={styles.infoValue}>
                        {machine.completedAmount} —à—Ç. ({calculateCompletionPercentage(machine.completedAmount, machine.productionRate)}%)
                        <div className={styles.progressBar}>
                          <div 
                            className={styles.progressFill} 
                            style={{ width: `${calculateCompletionPercentage(machine.completedAmount, machine.productionRate)}%` }}
                          />
                        </div>
                      </span>
                    </div>
                  </>
                )}
                
                {machine.status === 'active' && (
                  <div className={styles.buttonContainer}>
                    <button 
                      className={styles.openTaskButton}
                      onClick={() => handleOpenTask(machine.id)}
                    >
                      –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                    </button>
                  </div>
                )}
                
                {machine.status === 'inactive' && renderInactiveOverlay()}
                {machine.status === 'maintenance' && renderMaintenanceOverlay()}
                {machine.status === 'broken' && renderBrokenOverlay()}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default MachinesCards;