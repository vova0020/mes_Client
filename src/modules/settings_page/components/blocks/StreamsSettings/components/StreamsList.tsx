// ================================================
// src/modules/settings_page/components/blocks/StreamsSettings/components/StreamsList.tsx
// ================================================
import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { streamsApi } from '../api/streamsApi';
import { ProductionLine } from '../types/streams.types';
import { Material } from '../types/materials.types';
import styles from './StreamsList.module.css';

interface StreamsListProps {
  onStreamEdit: (streamId: number) => void;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
const useStreamMaterials = (streamId: number) => {
  return useQuery<Material[], Error>({
    queryKey: ['stream-materials', streamId],
    queryFn: () => streamsApi.getStreamMaterials(streamId),
    staleTime: 1000 * 60 * 2, // 2 –º–∏–Ω—É—Ç—ã
  });
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫ÔøΩÔøΩ
const useStreamStages = (streamId: number) => {
  return useQuery<any[], Error>({
    queryKey: ['stream-stages', streamId],
    queryFn: () => streamsApi.getStreamStages(streamId),
    staleTime: 1000 * 60 * 2, // 2 –º–∏–Ω—É—Ç—ã
  });
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Ç–æ–∫–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏
const StreamCard: React.FC<{
  stream: ProductionLine;
  onEdit: (streamId: number) => void;
  onDelete: (streamId: number) => void;
  isDeleteConfirm: boolean;
  onCancelDelete: () => void;
}> = ({ stream, onEdit, onDelete, isDeleteConfirm, onCancelDelete }) => {
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ —ç—Ç–∞–ø–∞—Ö
  const { data: materials = [] } = useStreamMaterials(stream.lineId);
  const { data: stages = [] } = useStreamStages(stream.lineId);

  return (
    <div key={stream.lineId} className={styles.streamCard}>
      <div className={styles.streamInfo}>
        <div className={styles.streamHeader}>
          <h3 className={styles.streamName}>{stream.lineName}</h3>
          <span className={styles.streamType}>{stream.lineType}</span>
        </div>

        <div className={styles.streamDetails}>
          <div className={styles.materialsInfo}>
            <span className={styles.materialsLabel}>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</span>
            <span className={styles.materialsCount}>
              {materials.length} —à—Ç.
            </span>
          </div>

          <div className={styles.stagesInfo}>
            <span className={styles.stagesLabel}>–≠—Ç–∞–ø—ã:</span>
            <span className={styles.stagesCount}>
              {stages.length} —à—Ç.
            </span>
          </div>
        </div>

        {/* Materials Preview */}
        {materials.length > 0 && (
          <div className={styles.materialsPreview}>
            <span className={styles.previewLabel}>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</span>
            <div className={styles.materialsTags}>
              {materials.slice(0, 3).map((material) => (
                <span key={material.materialId} className={styles.materialTag}>
                  {material.materialName}
                </span>
              ))}
              {materials.length > 3 && (
                <span className={styles.materialTag}>
                  +{materials.length - 3} –µ—â–µ
                </span>
              )}
            </div>
          </div>
        )}

        {/* Stages Preview */}
        {stages.length > 0 && (
          <div className={styles.stagesPreview}>
            <span className={styles.previewLabel}>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:</span>
            <div className={styles.stagesTags}>
              {stages.slice(0, 3).map((stage, index, arr) => (
                <span key={stage.stageId} className={styles.stageTag}>
                  {stage.stageName}{index < arr.length - 1 ? ',\u00A0' : ''}
                </span>
              ))}
              {stages.length > 3 && (
                <span className={styles.stageTag}>
                  +{stages.length - 3} –µ—â–µ
                </span>
              )}
            </div>
          </div>

        )}
      </div>

      <div className={styles.streamActions}>
        <button
          onClick={() => onEdit(stream.lineId)}
          className={`${styles.actionButton} ${styles.editButton}`}
          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫"
        >
          ‚úèÔ∏è
        </button>

        <button
          onClick={() => onDelete(stream.lineId)}
          className={`${styles.actionButton} ${isDeleteConfirm
              ? styles.confirmDeleteButton
              : styles.deleteButton
            }`}
          title={
            isDeleteConfirm
              ? "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
              : "–£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–∫"
          }
        >
          {isDeleteConfirm ? '‚úì' : 'üóëÔ∏è'}
        </button>

        {isDeleteConfirm && (
          <button
            onClick={onCancelDelete}
            className={`${styles.actionButton} ${styles.cancelButton}`}
            title="–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
          >
            ‚úï
          </button>
        )}
      </div>
    </div>
  );
};

export const StreamsList: React.FC<StreamsListProps> = ({ onStreamEdit }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [deleteConfirmId, setDeleteConfirmId] = useState<number | null>(null);
  const queryClient = useQueryClient();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  const {
    data: streams = [],
    isLoading,
    error
  } = useQuery<ProductionLine[], Error>({
    queryKey: ['streams'],
    queryFn: () => streamsApi.getStreams(),
    staleTime: 1000 * 60 * 2, // 2 –º–∏–Ω—É—Ç—ã
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
  const deleteMutation = useMutation({
    mutationFn: streamsApi.deleteStream,
    onSuccess: (_, streamId) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–µ—à –ø–æ—Ç–æ–∫–æ–≤
      queryClient.invalidateQueries({ queryKey: ['streams'] });

      // –£–¥–∞–ª—è–µ–º –∫–µ—à –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —ç—Ç–∞–ø–æ–≤ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      queryClient.removeQueries({ queryKey: ['stream-materials', streamId] });
      queryClient.removeQueries({ queryKey: ['stream-stages', streamId] });
      queryClient.removeQueries({ queryKey: ['stream', streamId] });

      setDeleteConfirmId(null);
    },
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredStreams = streams.filter((stream: ProductionLine) =>
    stream.lineName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    stream.lineType.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleDelete = (streamId: number) => {
    if (deleteConfirmId === streamId) {
      deleteMutation.mutate(streamId);
    } else {
      setDeleteConfirmId(streamId);
    }
  };

  const handleCancelDelete = () => {
    setDeleteConfirmId(null);
  };

  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.spinner}></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ç–æ–∫–æ–≤...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.errorContainer}>
        <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–æ–≤: {error.message}</p>
        <button
          onClick={() => queryClient.invalidateQueries({ queryKey: ['streams'] })}
          className={styles.retryButton}
        >
          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
        </button>
      </div>
    );
  }

  return (
    <div className={styles.streamsListContainer}>
      {/* Header with search */}
      <div className={styles.listHeader}>
        <div className={styles.searchContainer}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–∏–ø—É –ø–æ—Ç–æ–∫–∞..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className={styles.searchInput}
          />
          <span className={styles.searchIcon}>üîç</span>
        </div>
        <div className={styles.resultsCount}>
          –ù–∞–π–¥–µ–Ω–æ: {filteredStreams.length} –∏–∑ {streams.length}
        </div>
      </div>

      {/* Streams List */}
      <div className={styles.streamsList}>
        {filteredStreams.length === 0 ? (
          <div className={styles.emptyState}>
            <p>
              {searchTerm
                ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ—Ç–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                : '–ü–æ—Ç–æ–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã'
              }
            </p>
          </div>
        ) : (
          filteredStreams.map((stream: ProductionLine) => (
            <StreamCard
              key={stream.lineId}
              stream={stream}
              onEdit={onStreamEdit}
              onDelete={handleDelete}
              isDeleteConfirm={deleteConfirmId === stream.lineId}
              onCancelDelete={handleCancelDelete}
            />
          ))
        )}
      </div>

      {/* Loading indicator for delete operation */}
      {deleteMutation.isPending && (
        <div className={styles.operationOverlay}>
          <div className={styles.spinner}></div>
          <p>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞...</p>
        </div>
      )}
    </div>
  );
};