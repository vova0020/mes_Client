// ================================================
// src/modules/settings_page/components/blocks/StreamsSettings/components/stages/StagesLevel1List.tsx
// ================================================
import React, { useState } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { ProductionStageLevel1 } from '../../types/streams.types';
import { useStagesLevel1, useDeleteStageLevel1 } from '../../hooks/useStreamsQuery';
import styles from './StagesList.module.css';

interface StagesLevel1ListProps {
  onStageEdit: (stageId: number) => void;
  onCreateSubstage: (stageId: number) => void;
}

export const StagesLevel1List: React.FC<StagesLevel1ListProps> = ({
  onStageEdit,
  onCreateSubstage
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [deleteConfirmId, setDeleteConfirmId] = useState<number | null>(null);
  const queryClient = useQueryClient();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ 1 —É—Ä–æ–≤–Ω—è —Å WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  const { 
    data: stages, 
    isLoading, 
    error, 
    refetch,
    isWebSocketConnected
  } = useStagesLevel1();

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞
  const deleteStageMutation = useDeleteStageLevel1();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  const handleDeleteSuccess = () => {
    setDeleteConfirmId(null);
  };

  const handleDeleteError = (error: Error) => {
    alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredStages = stages?.filter(stage => {
    if (!searchTerm.trim()) return true;
    
    const searchTermLower = searchTerm.toLowerCase().trim();
    const stageName = stage.stageName.toLowerCase();
    const description = stage.description?.toLowerCase() || '';
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (stageName === searchTermLower || description === searchTermLower) {
      return true;
    }
    
    // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (stageName.startsWith(searchTermLower) || description.startsWith(searchTermLower)) {
      return true;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–±–µ–ª–∞–º–∏)
    const searchWords = searchTermLower.split(/\s+/).filter(word => word.length > 0);
    const stageWords = stageName.split(/\s+/);
    const descriptionWords = description.split(/\s+/);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–∞–∫–æ–µ-—Ç–æ —Å–ª–æ–≤–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    const hasWordMatch = searchWords.every((searchWord: string) => 
      stageWords.some((word: string) => word.startsWith(searchWord)) ||
      descriptionWords.some((word: string) => word.startsWith(searchWord))
    );
    
    if (hasWordMatch) {
      return true;
    }
    
    // –ï—Å–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑—Ä–µ—à–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (searchTermLower.length > 2) {
      return stageName.includes(searchTermLower) || description.includes(searchTermLower);
    }
    
    return false;
  }) || [];

  const handleDeleteStage = (stageId: number) => {
    if (deleteConfirmId === stageId) {
      deleteStageMutation.mutate(stageId, {
        onSuccess: handleDeleteSuccess,
        onError: handleDeleteError
      });
    } else {
      setDeleteConfirmId(stageId);
    }
  };

  const handleCancelDelete = () => {
    setDeleteConfirmId(null);
  };

  if (isLoading) {
    return (
      <div className={styles.loading}>
        <div className={styles.spinner}></div>
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.error}>
        <div className={styles.errorContent}>
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p>{error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
          <button onClick={() => refetch()} className={styles.retryButton}>
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.listContainer}>
      {/* Search and Filters */}
      <div className={styles.listHeader}>
        <div className={styles.searchSection}>
          <div className={styles.searchInputGroup}>
            <span className={styles.searchIcon}>üîç</span>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={styles.searchInput}
            />
            {searchTerm && (
              <button
                onClick={() => setSearchTerm('')}
                className={styles.clearSearchButton}
              >
                ‚úï
              </button>
            )}
          </div>
        </div>
        
        <div className={styles.listStats}>
          <span className={styles.statsText}>
            –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: <strong>{filteredStages.length}</strong>
            {searchTerm && ` (–Ω–∞–π–¥–µ–Ω–æ –∏–∑ ${stages?.length || 0})`}
            {isWebSocketConnected && (
              <span className={styles.realtimeIndicator}> ‚Ä¢ Live</span>
            )}
          </span>
        </div>
      </div>

      {/* Stages List */}
      <div className={styles.listContent}>
        {filteredStages.length === 0 ? (
          <div className={styles.emptyState}>
            <div className={styles.emptyStateIcon}>‚öôÔ∏è</div>
            <h3 className={styles.emptyStateTitle}>
              {searchTerm ? '–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'}
            </h3>
            <p className={styles.emptyStateDescription}>
              {searchTerm 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'
                : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
              }
            </p>
          </div>
        ) : (
          <div className={styles.stagesGrid}>
            {filteredStages.map((stage) => (
              <div key={stage.stageId} className={styles.stageCard}>
                <div className={styles.stageCardHeader}>
                  <div className={styles.stageCardInfo}>
                    <h3 className={styles.stageCardTitle}>
                      <span className={styles.stageCardIcon}>
                        {stage.finalStage ? 'üì¶' : '‚öôÔ∏è'}
                      </span>
                      {stage.stageName}
                      {stage.finalStage && (
                        <span className={styles.finalStageBadge}>
                          –§–∏–Ω–∞–ª—å–Ω—ã–π
                        </span>
                      )}
                    </h3>
                    {stage.description && (
                      <p className={styles.stageCardDescription}>
                        {stage.description}
                      </p>
                    )}
                  </div>
                  <div className={styles.stageCardActions}>
                    <button
                      onClick={() => onStageEdit(stage.stageId)}
                      className={`${styles.actionButton} ${styles.editButton}`}
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      onClick={() => handleDeleteStage(stage.stageId)}
                      className={`${styles.actionButton} ${
                        deleteConfirmId === stage.stageId 
                          ? styles.confirmDeleteButton 
                          : styles.deleteButton
                      }`}
                      title={deleteConfirmId === stage.stageId ? "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ" : "–£–¥–∞–ª–∏—Ç—å"}
                      disabled={deleteStageMutation.isPending}
                    >
                      {deleteConfirmId === stage.stageId ? '‚úì' : 'üóëÔ∏è'}
                    </button>
                    {deleteConfirmId === stage.stageId && (
                      <button
                        onClick={handleCancelDelete}
                        className={`${styles.actionButton} ${styles.cancelButton}`}
                        title="–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
                      >
                        ‚úï
                      </button>
                    )}
                  </div>
                </div>

                <div className={styles.stageCardStats}>
                  <div className={styles.statItem}>
                    <span className={styles.statIcon}>üîß</span>
                    <span className={styles.statValue}>
                      {stage.substagesCount || 0}
                    </span>
                    <span className={styles.statLabel}>–ø–æ–¥—ç—Ç–∞–ø–æ–≤</span>
                  </div>
                  <div className={styles.statItem}>
                    <span className={styles.statIcon}>üìÖ</span>
                    <span className={styles.statValue}>
                      {new Date(stage.createdAt).toLocaleDateString('ru-RU')}
                    </span>
                    <span className={styles.statLabel}>—Å–æ–∑–¥–∞–Ω–æ</span>
                  </div>
                </div>

                <div className={styles.stageCardFooter}>
                  <button
                    onClick={() => onCreateSubstage(stage.stageId)}
                    className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
                  >
                    <span className={styles.buttonIcon}>+</span>
                    –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—ç—Ç–∞–ø
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Loading indicator for delete operation */}
      {deleteStageMutation.isPending && (
        <div className={styles.operationOverlay}>
          <div className={styles.spinner}></div>
          <p>–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...</p>
        </div>
      )}
    </div>
  );
};