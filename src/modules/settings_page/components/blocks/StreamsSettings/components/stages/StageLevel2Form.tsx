// ================================================
// src/modules/settings_page/components/blocks/StreamsSettings/components/stages/StageLevel2Form.tsx
// ================================================
import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { streamsApi } from '../../api/streamsApi';
import { CreateStageLevel2Data, UpdateStageLevel2Data, RebindStageLevel2Data } from '../../types/streams.types';
import styles from '../StreamForm.module.css';

interface StageLevel2FormProps {
  editId?: number;
  preselectedStageId?: number;
  onSaved: () => void;
  onCancel: () => void;
}

export const StageLevel2Form: React.FC<StageLevel2FormProps> = ({ 
  editId, 
  preselectedStageId,
  onSaved, 
  onCancel 
}) => {
  const [formData, setFormData] = useState({
    stageId: preselectedStageId || '',
    substageName: '',
    description: '',
    allowance: '1',
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});
  const queryClient = useQueryClient();
  const isEditing = Boolean(editId);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const { data: editSubstage, isLoading: isLoadingEdit } = useQuery({
    queryKey: ['production-stage-level2', editId],
    queryFn: () => streamsApi.getProductionStageLevel2(editId!),
    enabled: isEditing,
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç—Ç–∞–ø–æ–≤
  const { data: parentStages = [] } = useQuery({
    queryKey: ['production-stages-level1'],
    queryFn: () => streamsApi.getProductionStagesLevel1(),
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—ç—Ç–∞–ø–∞
  const createMutation = useMutation({
    mutationFn: (data: CreateStageLevel2Data) => streamsApi.createProductionStageLevel2(data),
    onSuccess: (newSubstage) => {
      console.log('‚úÖ –ü–æ–¥—ç—Ç–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', newSubstage);
      queryClient.invalidateQueries({ queryKey: ['production-stages-level2'] });
      queryClient.invalidateQueries({ queryKey: ['production-stages-level1'] }); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      onSaved();
    },
    onError: (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—ç—Ç–∞–ø–∞:', error);
      setErrors({ submit: error.message });
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—ç—Ç–∞–ø–∞
  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: UpdateStageLevel2Data }) =>
      streamsApi.updateProductionStageLevel2(id, data),
    onSuccess: (updatedSubstage) => {
      console.log('‚úÖ –ü–æ–¥—ç—Ç–∞–ø –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', updatedSubstage);
      queryClient.invalidateQueries({ queryKey: ['production-stages-level2'] });
      queryClient.invalidateQueries({ queryKey: ['production-stage-level2', editId] });
      queryClient.invalidateQueries({ queryKey: ['production-stages-level1'] }); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      onSaved();
    },
    onError: (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—ç—Ç–∞–ø–∞:', error);
      setErrors({ submit: error.message });
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–¥—ç—Ç–∞–ø–∞ –∫ –¥—Ä—É–≥–æ–º—É —ç—Ç–∞–ø—É 1 —É—Ä–æ–≤–Ω—è
  const rebindMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: RebindStageLevel2Data }) =>
      streamsApi.rebindProductionStageLevel2(id, data),
    onSuccess: (reboundSubstage) => {
      console.log('‚úÖ –ü–æ–¥—ç—Ç–∞–ø –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ:', reboundSubstage);
      queryClient.invalidateQueries({ queryKey: ['production-stages-level2'] });
      queryClient.invalidateQueries({ queryKey: ['production-stage-level2', editId] });
      queryClient.invalidateQueries({ queryKey: ['production-stages-level1'] }); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      onSaved();
    },
    onError: (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–¥—ç—Ç–∞–ø–∞:', error);
      setErrors({ submit: error.message });
    },
  });

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (editSubstage) {
      setFormData({
        stageId: editSubstage.stageId.toString(),
        substageName: editSubstage.substageName,
        description: editSubstage.description || '',
        allowance: editSubstage.allowance.toString(),
      });
    }
  }, [editSubstage]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º stageId
    const stageIdNum = Number(formData.stageId);
    if (!formData.stageId || isNaN(stageIdNum) || stageIdNum <= 0) {
      newErrors.stageId = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é';
    }

    if (!formData.substageName.trim()) {
      newErrors.substageName = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—ç—Ç–∞–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.substageName.trim().length < 2) {
      newErrors.substageName = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–ø–æ–ª–µ —Å–∫—Ä—ã—Ç–æ)
    // const allowanceNum = Number(formData.allowance);
    // if (!formData.allowance || isNaN(allowanceNum) || allowanceNum < 0) {
    //   newErrors.allowance = '–î–æ–ø—É—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º';
    // } else if (allowanceNum > 1000) {
    //   newErrors.allowance = '–î–æ–ø—É—Å–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 –º–º';
    // }

    if (formData.description && formData.description.length > 500) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    if (isEditing && editId !== undefined && editSubstage) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
      const hasStageChanged = Number(formData.stageId) !== editSubstage.stageId;
      
      if (hasStageChanged) {
        // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏
        rebindMutation.mutate({ 
          id: editId, 
          data: { newStageId: Number(formData.stageId) }
        });
      } else {
        // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ stageId
        const updateData: UpdateStageLevel2Data = {
          substageName: formData.substageName.trim(),
          description: formData.description.trim() || undefined,
          allowance: Number(formData.allowance),
        };
        updateMutation.mutate({ id: editId, data: updateData });
      }
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—ç—Ç–∞–ø–∞
      const createData: CreateStageLevel2Data = {
        stageId: Number(formData.stageId),
        substageName: formData.substageName.trim(),
        description: formData.description.trim() || undefined,
        allowance: Number(formData.allowance),
      };
      createMutation.mutate(createData);
    }
  };

  const isLoading = createMutation.isPending || updateMutation.isPending || rebindMutation.isPending || isLoadingEdit;

  const selectedParentStage = parentStages.find(stage => stage.stageId === Number(formData.stageId));

  return (
    <div className={styles.streamFormContainer}> 
      <div className={styles.formHeader}>
        <h2 className={styles.formTitle}>
          <span style={{ marginRight: '0.5rem' }}>üîß</span>
          {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—ç—Ç–∞–ø' : '–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—ç—Ç–∞–ø'}
        </h2>
        <button
          onClick={onCancel}
          className={styles.closeButton}
          type="button"
          disabled={isLoading}
        >
          ‚úï
        </button>
      </div>

      <form onSubmit={handleSubmit} className={styles.form}>
        {/* –í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        <div className={styles.formSection}>
          <h3 className={styles.sectionTitle}>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</h3>
          
          <div className={styles.formGroup}>
            <label htmlFor="stageId" className={styles.label}>
              –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è *
            </label>
            <select
              id="stageId"
              name="stageId"
              value={formData.stageId}
              onChange={handleInputChange}
              className={`${styles.select} ${errors.stageId ? styles.errorBorder : ''}`}
              disabled={isLoading} // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é</option>
              {parentStages.map(stage => (
                <option key={stage.stageId} value={stage.stageId}>
                  {stage.stageName}
                </option>
              ))}
            </select>
            {errors.stageId && (
              <div className={styles.error}>{errors.stageId}</div>
            )}
            
            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {isEditing && editSubstage && Number(formData.stageId) !== editSubstage.stageId && (
              <div style={{ 
                color: '#d97706', 
                backgroundColor: '#fef3c7', 
                padding: '12px 16px', 
                borderRadius: '6px',
                marginTop: '12px',
                border: '1px solid #fbbf24',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}>
                <span style={{fontSize: '18px'}}>‚ö†Ô∏è</span>
                <div>
                  <div style={{fontWeight: '600', marginBottom: '4px'}}>
                    –í–Ω–∏–º–∞–Ω–∏–µ: —Å–º–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                  </div>
                  <div style={{fontSize: '14px'}}>
                    –ü–æ–¥—ç—Ç–∞–ø –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ "{editSubstage.stageName}" 
                    –≤ –æ–ø–µ—Ä–∞—Ü–∏—é "{selectedParentStage?.stageName}". 
                    –î–∞–Ω–Ω—ã–µ –ø–æ–¥—ç—Ç–∞–ø–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–ø—É—Å–∫) —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.
                  </div>
                </div>
              </div>
            )}
            
            {selectedParentStage && (
              <div className={styles.selectedStageInfo}>
                <div className={styles.stageInfoCard}>
                  <div className={styles.stageInfoHeader}>
                    <span className={styles.stageInfoIcon}>‚öôÔ∏è</span>
                    <span className={styles.stageInfoName}>{selectedParentStage.stageName}</span>
                  </div>
                  {selectedParentStage.description && (
                    <div className={styles.stageInfoDescription}>
                      {selectedParentStage.description}
                    </div>
                  )}
                  <div className={styles.stageInfoStats}>
                    <span>–ü–æ–¥—ç—Ç–∞–ø–æ–≤: {selectedParentStage.substagesCount || 0}</span>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥—ç—Ç–∞–ø–∞ */}
        <div className={styles.formSection}>
          <h3 className={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—ç—Ç–∞–ø–µ</h3>
          
          <div className={styles.formGroup}>
            <label htmlFor="substageName" className={styles.label}>
              –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—ç—Ç–∞–ø–∞ *
            </label>
            <input
              type="text"
              id="substageName"
              name="substageName"
              value={formData.substageName}
              onChange={handleInputChange}
              className={`${styles.input} ${errors.substageName ? styles.errorBorder : ''}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—ç—Ç–∞–ø–∞"
              disabled={isLoading}
            />
            {errors.substageName && (
              <div className={styles.error}>{errors.substageName}</div>
            )}
          </div>

          {/* –ü–æ–ª–µ –¥–æ–ø—É—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–æ */}
          <div className={styles.formGroup} style={{ display: 'none' }}>
            <label htmlFor="allowance" className={styles.label}>
              –î–æ–ø—É—Å–∫ (–º–º) *
            </label>
            <input
              type="number"
              id="allowance"
              name="allowance"
              value={formData.allowance}
              onChange={handleInputChange}
              className={`${styles.input} ${errors.allowance ? styles.errorBorder : ''}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø—É—Å–∫ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö"
              min="0"
              max="1000"
              step="0.01"
              disabled={isLoading}
            />
            {errors.allowance && (
              <div className={styles.error}>{errors.allowance}</div>
            )}
            <div className={styles.fieldHint}>
              –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—ç—Ç–∞–ø–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 0 –¥–æ 1000 –º–º)
            </div>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="description" className={styles.label}>
              –û–ø–∏—Å–∞–Ω–∏–µ
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              className={`${styles.textarea} ${errors.description ? styles.errorBorder : ''}`}
              placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—ç—Ç–∞–ø (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              rows={4}
              disabled={isLoading}
            />
            {errors.description && (
              <div className={styles.error}>{errors.description}</div>
            )}
            <div className={styles.characterCount}>
              {formData.description.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
            </div>
          </div>
        </div>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
        {isEditing && editSubstage && (
          <div className={styles.formSection}>
            <h3 className={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className={styles.editInfo}>
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>ID –ø–æ–¥—ç—Ç–∞–ø–∞:</span>
                <span className={styles.infoValue}>{editSubstage.substageId}</span>
              </div>
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>–¢–µ–∫—É—â–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</span>
                <span className={styles.infoValue}>
                  {editSubstage.stageName || `ID: ${editSubstage.stageId}`}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
        {errors.submit && (
          <div className={styles.formSection}>
            <div className={styles.errorMessage}>
              <strong>–û—à–∏–±–∫–∞:</strong> {errors.submit}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className={styles.formActions}>
          <button
            type="button"
            onClick={onCancel}
            className={`${styles.button} ${styles.cancelButton}`}
            disabled={isLoading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            className={`${styles.button} ${styles.submitButton}`}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <span className={styles.spinner}></span>
                {isEditing ? 
                  (editSubstage && Number(formData.stageId) !== editSubstage.stageId ? '–ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞...' : '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...') 
                  : '–°–æ–∑–¥–∞–Ω–∏–µ...'
                }
              </>
            ) : (
              <>
                <span style={{ marginRight: '0.5rem' }}>
                  {isEditing ? 
                    (editSubstage && Number(formData.stageId) !== editSubstage.stageId ? 'üîÑ' : 'üíæ') 
                    : '‚ú®'
                  }
                </span>
                {isEditing ? 
                  (editSubstage && Number(formData.stageId) !== editSubstage.stageId ? '–ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–¥—ç—Ç–∞–ø' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
                  : '–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—ç—Ç–∞–ø'
                }
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};