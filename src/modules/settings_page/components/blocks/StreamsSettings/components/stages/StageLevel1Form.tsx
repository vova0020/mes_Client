// ================================================
// src/modules/settings_page/components/blocks/StreamsSettings/components/stages/StageLevel1Form.tsx
// ================================================
import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { streamsApi } from '../../api/streamsApi';
import { CreateStageLevel1Data, UpdateStageLevel1Data } from '../../types/streams.types';
import styles from '../StreamForm.module.css';

interface StageLevel1FormProps {
  editId?: number;
  onSaved: () => void;
  onCancel: () => void;
}

export const StageLevel1Form: React.FC<StageLevel1FormProps> = ({ 
  editId, 
  onSaved, 
  onCancel 
}) => {
  const [formData, setFormData] = useState({
    stageName: '',
    description: '',
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});
  const queryClient = useQueryClient();
  const isEditing = Boolean(editId);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const { data: editStage, isLoading: isLoadingEdit } = useQuery({
    queryKey: ['production-stage-level1', editId],
    queryFn: () => streamsApi.getProductionStageLevel1(editId!),
    enabled: isEditing,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ø–∞
  const createMutation = useMutation({
    mutationFn: (data: CreateStageLevel1Data) => streamsApi.createProductionStageLevel1(data),
    onSuccess: (newStage) => {
      console.log('‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', newStage);
      queryClient.invalidateQueries({ queryKey: ['production-stages-level1'] });
      onSaved();
    },
    onError: (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      setErrors({ submit: error.message });
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞
  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: UpdateStageLevel1Data }) =>
      streamsApi.updateProductionStageLevel1(id, data),
    onSuccess: (updatedStage) => {
      console.log('‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µÔøΩÔøΩ–Ω–æ:', updatedStage);
      queryClient.invalidateQueries({ queryKey: ['production-stages-level1'] });
      queryClient.invalidateQueries({ queryKey: ['production-stage-level1', editId] });
      onSaved();
    },
    onError: (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      setErrors({ submit: error.message });
    },
  });

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (editStage) {
      setFormData({
        stageName: editStage.stageName,
        description: editStage.description || '',
      });
    }
  }, [editStage]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.stageName.trim()) {
      newErrors.stageName = '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.stageName.trim().length < 2) {
      newErrors.stageName = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    if (formData.description && formData.description.length > 500) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    const stageData = {
      stageName: formData.stageName.trim(),
      description: formData.description.trim() || undefined,
    };

    if (isEditing && editId !== undefined) {
      updateMutation.mutate({ id: editId, data: stageData });
    } else {
      createMutation.mutate(stageData as CreateStageLevel1Data);
    }
  };

  const isLoading = createMutation.isPending || updateMutation.isPending || isLoadingEdit;

  return (
    <div className={styles.streamFormContainer}> 
      <div className={styles.formHeader}>
        <h2 className={styles.formTitle}>
          <span style={{ marginRight: '0.5rem' }}>‚öôÔ∏è</span>
          {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é'}
        </h2>
        <button
          onClick={onCancel}
          className={styles.closeButton}
          type="button"
          disabled={isLoading}
        >
          ‚úï
        </button>
      </div>

      <form onSubmit={handleSubmit} className={styles.form}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className={styles.formSection}>
          <h3 className={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          
          <div className={styles.formGroup}>
            <label htmlFor="stageName" className={styles.label}>
              –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ *
            </label>
            <input
              type="text"
              id="stageName"
              name="stageName"
              value={formData.stageName}
              onChange={handleInputChange}
              className={`${styles.input} ${errors.stageName ? styles.errorBorder : ''}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
              disabled={isLoading}
            />
            {errors.stageName && (
              <div className={styles.error}>{errors.stageName}</div>
            )}
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="description" className={styles.label}>
              –û–ø–∏—Å–∞–Ω–∏–µ
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              className={`${styles.textarea} ${errors.description ? styles.errorBorder : ''}`}
              placeholder="–û–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              rows={4}
              disabled={isLoading}
            />
            {errors.description && (
              <div className={styles.error}>{errors.description}</div>
            )}
            <div className={styles.characterCount}>
              {formData.description.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
            </div>
          </div>
        </div>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
        {isEditing && editStage && (
          <div className={styles.formSection}>
            <h3 className={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className={styles.statsGrid}>
              <div className={styles.statCard}>
                <div className={styles.statIcon}>üîß</div>
                <div className={styles.statInfo}>
                  <div className={styles.statValue}>{editStage.substagesCount || 0}</div>
                  <div className={styles.statLabel}>–ü–æ–¥—ç—Ç–∞–ø–æ–≤</div>
                </div>
              </div>
              <div className={styles.statCard}>
                <div className={styles.statIcon}>üìÖ</div>
                <div className={styles.statInfo}>
                  <div className={styles.statValue}>
                    {new Date(editStage.createdAt).toLocaleDateString('ru-RU')}
                  </div>
                  <div className={styles.statLabel}>–°–æ–∑–¥–∞–Ω–æ</div>
                </div>
              </div>
              <div className={styles.statCard}>
                <div className={styles.statIcon}>üìù</div>
                <div className={styles.statInfo}>
                  <div className={styles.statValue}>
                    {new Date(editStage.updatedAt).toLocaleDateString('ru-RU')}
                  </div>
                  <div className={styles.statLabel}>–û–±–Ω–æ–≤–ª–µ–Ω–æ</div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
        {errors.submit && (
          <div className={styles.formSection}>
            <div className={styles.errorMessage}>
              <strong>–û—à–∏–±–∫–∞:</strong> {errors.submit}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className={styles.formActions}>
          <button
            type="button"
            onClick={onCancel}
            className={`${styles.button} ${styles.cancelButton}`}
            disabled={isLoading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            className={`${styles.button} ${styles.submitButton}`}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <span className={styles.spinner}></span>
                {isEditing ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ–∑–¥–∞–Ω–∏–µ...'}
              </>
            ) : (
              <>
                <span style={{ marginRight: '0.5rem' }}>
                  {isEditing ? 'üíæ' : '‚ú®'}
                </span>
                {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'}
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};