// ================================================
// src/modules/settings_page/components/blocks/StreamsSettings/components/stages/StagesLevel2List.tsx
// ================================================
import React, { useState } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { ProductionStageLevel2 } from '../../types/streams.types';
import { useStagesLevel1, useStagesLevel2, useDeleteStageLevel2 } from '../../hooks/useStreamsQuery';
import styles from './StagesList.module.css';

interface StagesLevel2ListProps {
  onSubstageEdit: (substageId: number) => void;
  onCreateNew?: (preselectedStageId?: number) => void;
}

export const StagesLevel2List: React.FC<StagesLevel2ListProps> = ({ 
  onSubstageEdit, 
  onCreateNew 
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [deleteConfirmId, setDeleteConfirmId] = useState<number | null>(null);
  const queryClient = useQueryClient();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—ç—Ç–∞–ø–æ–≤ 2 —É—Ä–æ–≤–Ω—è —Å WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  const { 
    data: substages = [], 
    isLoading, 
    error, 
    refetch,
    isWebSocketConnected
  } = useStagesLevel2();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç—Ç–∞–ø–æ–≤ 1 —É—Ä–æ–≤–Ω—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const { data: parentStages = [] } = useStagesLevel1();

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—ç—Ç–∞–ø–∞
  const deleteSubstageMutation = useDeleteStageLevel2();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
  const handleDeleteSuccess = () => {
    setDeleteConfirmId(null);
  };

  const handleDeleteError = (error: Error) => {
    alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—ç—Ç–∞–ø–∞: ${error.message}`);
  };

  // –°–æ–∑–¥–∞–µ–º map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const parentStagesMap = parentStages.reduce((acc, stage) => {
    acc[stage.stageId] = stage;
    return acc;
  }, {} as Record<number, any>);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredSubstages = substages.filter(substage => {
    if (!searchTerm.trim()) return true;
    
    const searchTermLower = searchTerm.toLowerCase().trim();
    const substageName = substage.substageName.toLowerCase();
    const description = substage.description?.toLowerCase() || '';
    const parentStage = parentStagesMap[substage.stageId];
    const parentStageName = parentStage?.stageName.toLowerCase() || '';
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (substageName === searchTermLower || 
        description === searchTermLower || 
        parentStageName === searchTermLower) {
      return true;
    }
    
    // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (substageName.startsWith(searchTermLower) || 
        description.startsWith(searchTermLower) || 
        parentStageName.startsWith(searchTermLower)) {
      return true;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–±–µ–ª–∞–º–∏)
    const searchWords = searchTermLower.split(/\s+/).filter(word => word.length > 0);
    const substageWords = substageName.split(/\s+/);
    const descriptionWords = description.split(/\s+/);
    const parentStageWords = parentStageName.split(/\s+/);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–∞–∫–æ–µ-—Ç–æ —Å–ª–æ–≤–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    const hasWordMatch = searchWords.every((searchWord: string) => 
      substageWords.some((word: string) => word.startsWith(searchWord)) ||
      descriptionWords.some((word: string) => word.startsWith(searchWord)) ||
      parentStageWords.some((word: string) => word.startsWith(searchWord))
    );
    
    if (hasWordMatch) {
      return true;
    }
    
    // –ï—Å–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑—Ä–µ—à–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (searchTermLower.length > 2) {
      return substageName.includes(searchTermLower) || 
             description.includes(searchTermLower) || 
             parentStageName.includes(searchTermLower);
    }
    
    return false;
  });

  const handleDeleteSubstage = (substageId: number) => {
    if (deleteConfirmId === substageId) {
      deleteSubstageMutation.mutate(substageId, {
        onSuccess: handleDeleteSuccess,
        onError: handleDeleteError
      });
    } else {
      setDeleteConfirmId(substageId);
    }
  };

  const handleCancelDelete = () => {
    setDeleteConfirmId(null);
  };

  if (isLoading) {
    return (
      <div className={styles.loading}>
        <div className={styles.spinner}></div>
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π...
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.error}>
        <div className={styles.errorContent}>
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p>{error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
          <button onClick={() => refetch()} className={styles.retryButton}>
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.listContainer}>
      {/* Search and Filters */}
      <div className={styles.listHeader}>
        <div className={styles.searchSection}>
          <div className={styles.searchInputGroup}>
            <span className={styles.searchIcon}>üîç</span>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–¥—ç—Ç–∞–ø–∞, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={styles.searchInput}
            />
            {searchTerm && (
              <button
                onClick={() => setSearchTerm('')}
                className={styles.clearSearchButton}
              >
                ‚úï
              </button>
            )}
          </div>
        </div>
        
        <div className={styles.listStats}>
          <span className={styles.statsText}>
            –í—Å–µ–≥–æ –ø–æ–¥—ç—Ç–∞–ø–æ–≤: <strong>{filteredSubstages.length}</strong>
            {searchTerm && ` (–Ω–∞–π–¥–µ–Ω–æ –∏–∑ ${substages.length})`}
            {isWebSocketConnected && (
              <span className={styles.realtimeIndicator}> ‚Ä¢ Live</span>
            )}
          </span>
        </div>
      </div>

      {/* Substages List */}
      <div className={styles.listContent}>
        {filteredSubstages.length === 0 ? (
          <div className={styles.emptyState}>
            <div className={styles.emptyStateIcon}>üîß</div>
            <h3 className={styles.emptyStateTitle}>
              {searchTerm ? '–ü–æ–¥—ç—Ç–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π'}
            </h3>
            <p className={styles.emptyStateDescription}>
              {searchTerm 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'
                : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ–¥—ç—Ç–∞–ø –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
              }
            </p>
          </div>
        ) : (
          <div className={styles.substagesGrid}>
            {filteredSubstages.map((substage) => {
              const parentStage = parentStagesMap[substage.stageId];
              
              return (
                <div key={substage.substageId} className={styles.substageCard}>
                  <div className={styles.substageCardHeader}>
                    <div className={styles.substageCardInfo}>
                      {/* –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è */}
                      <div className={styles.substageParent}>
                        <span className={styles.parentIcon}>‚öôÔ∏è</span>
                        <span className={styles.parentName}>
                          {parentStage?.stageName || `ID: ${substage.stageId}`}
                        </span>
                      </div>
                      
                      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—ç—Ç–∞–ø–∞ */}
                      <h3 className={styles.substageCardTitle}>
                        <span className={styles.substageCardIcon}>üîß</span>
                        {substage.substageName}
                      </h3>
                      
                      {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—ç—Ç–∞–ø–∞ */}
                      {substage.description && (
                        <p className={styles.substageCardDescription}>
                         –û–ø–∏—Å–∞–Ω–∏–µ: {substage.description}
                        </p>
                      )}
                    </div>
                    
                    <div className={styles.substageCardActions}>
                      <button
                        onClick={() => onSubstageEdit(substage.substageId)}
                        className={`${styles.actionButton} ${styles.editButton}`}
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        onClick={() => handleDeleteSubstage(substage.substageId)}
                        className={`${styles.actionButton} ${
                          deleteConfirmId === substage.substageId 
                            ? styles.confirmDeleteButton 
                            : styles.deleteButton
                        }`}
                        title={deleteConfirmId === substage.substageId ? "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ" : "–£–¥–∞–ª–∏—Ç—å"}
                        disabled={deleteSubstageMutation.isPending}
                      >
                        {deleteConfirmId === substage.substageId ? '‚úì' : 'üóëÔ∏è'}
                      </button>
                      {deleteConfirmId === substage.substageId && (
                        <button
                          onClick={handleCancelDelete}
                          className={`${styles.actionButton} ${styles.cancelButton}`}
                          title="–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
                        >
                          ‚úï
                        </button>
                      )}
                    </div>
                  </div>

                  {/* <div className={styles.substageCardStats}>
                    <div className={styles.statItem}>
                      <span className={styles.statIcon}>üìè</span>
                      <span className={styles.statValue}>
                        {substage.allowance} –º–º
                      </span>
                      <span className={styles.statLabel}>–¥–æ–ø—É—Å–∫</span>
                    </div>
                    <div className={styles.statItem}>
                      <span className={styles.statIcon}>üÜî</span>
                      <span className={styles.statValue}>
                        {substage.substageId}
                      </span>
                      <span className={styles.statLabel}>ID —Ä–æ–¥–∏—Ç–µ–ª—è</span>
                    </div>
                  </div> */}
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* Loading indicator for delete operation */}
      {deleteSubstageMutation.isPending && (
        <div className={styles.operationOverlay}>
          <div className={styles.spinner}></div>
          <p>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—ç—Ç–∞–ø–∞...</p>
        </div>
      )}
    </div>
  );
};