
import React, { useState, useEffect } from 'react';
import { 
  useUserRoles, 
  useAvailableRoles,
  useAssignGlobalRole,
  useRemoveGlobalRole,
  useCreateRoleBinding,
  useRemoveRoleBinding,
  useContextMachines,
  useContextStages,
  useContextPickers,
  useUsers,
  usePickerByUserId,
  useCreatePickerWithRole,
  useDeletePicker
} from '../hooks/useUsersQuery';
import { User, CreateRoleBindingDto } from '../services/usersApi';
import styles from './UserDetails.module.css';

interface UserDetailsProps {
  selectedUser: User | null;
  onUserUpdated?: (updatedUser: User) => void;
}

type ContextType = 'MACHINE' | 'STAGE_LEVEL1' | 'ORDER_PICKER';

export const UserDetails: React.FC<UserDetailsProps> = ({ 
  selectedUser, 
  onUserUpdated 
}) => {
  const [activeTab, setActiveTab] = useState<'info' | 'roles' | 'picker'>('info');
  const [showAddRoleModal, setShowAddRoleModal] = useState(false);
  const [showAddBindingModal, setShowAddBindingModal] = useState(false);
  const [selectedContextType, setSelectedContextType] = useState<ContextType>('MACHINE');
  const [showCreatePickerModal, setShowCreatePickerModal] = useState(false);

  const { data: userRoles } = useUserRoles(selectedUser?.userId);
  const { data: availableRoles } = useAvailableRoles();
  const { data: contextMachines = [] } = useContextMachines();
  const { data: contextStages = [] } = useContextStages();
  const { data: contextPickers = [] } = useContextPickers();
  const { data: users = [] } = useUsers();
  const { data: userPicker, error: pickerError } = usePickerByUserId(selectedUser?.userId);
  
  const assignGlobalRoleMutation = useAssignGlobalRole();
  const removeGlobalRoleMutation = useRemoveGlobalRole();
  const createBindingMutation = useCreateRoleBinding();
  const removeBindingMutation = useRemoveRoleBinding();
  const createPickerWithRoleMutation = useCreatePickerWithRole();
  const deletePickerMutation = useDeletePicker();

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
  const currentUser = selectedUser 
    ? users.find(u => u.userId === selectedUser.userId) || selectedUser
    : null;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫
  const hasPickerRole = userRoles?.globalRoles.includes('orderPicker') || 
    userRoles?.roleBindings.some(binding => binding.role === 'orderPicker');

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    if (currentUser && onUserUpdated && selectedUser) {
      if (JSON.stringify(currentUser) !== JSON.stringify(selectedUser)) {
        console.log('[UserDetails] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—åÔøΩÔøΩ–æ–≤–∞—Ç–µ–ª—è, —É–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è');
        onUserUpdated(currentUser);
      }
    }
  }, [currentUser, selectedUser, onUserUpdated]);

  const handleAssignGlobalRole = async (role: string) => {
    if (!currentUser) return;
    
    try {
      console.log('[UserDetails] –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å:', role);
      await assignGlobalRoleMutation.mutateAsync({
        userId: currentUser.userId,
        role
      });
      setShowAddRoleModal(false);
      console.log('[UserDetails] –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏:', error);
      alert('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleRemoveGlobalRole = async (role: string) => {
    if (!currentUser) return;
    
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å "${role}"?`)) {
      try {
        console.log('[UserDetails] –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å:', role);
        await removeGlobalRoleMutation.mutateAsync({
          userId: currentUser.userId,
          role
        });
        console.log('[UserDetails] –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  const handleCreateRoleBinding = async (role: string, contextId: number) => {
    if (!currentUser) return;
    
    try {
      console.log('[UserDetails] –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É:', { role, contextType: selectedContextType, contextId });
      await createBindingMutation.mutateAsync({
        userId: currentUser.userId,
        role,
        contextType: selectedContextType,
        contextId
      });
      setShowAddBindingModal(false);
      console.log('[UserDetails] –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleRemoveRoleBinding = async (bindingId: number, bindingName: string) => {
    if (!currentUser) return;
    
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É "${bindingName}"?`)) {
      try {
        console.log('[UserDetails] –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É:', bindingId);
        await removeBindingMutation.mutateAsync({
          bindingId,
          userId: currentUser.userId
        });
        console.log('[UserDetails] –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–øÔøΩÔøΩ–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  const handleCreatePicker = async () => {
    if (!currentUser) return;
    
    try {
      console.log('[UserDetails] –°–æ–∑–¥–∞–µ–º ÔøΩÔøΩ–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser.userId);
      await createPickerWithRoleMutation.mutateAsync({
        userId: currentUser.userId,
        assignRole: true
      });
      setShowCreatePickerModal(false);
      console.log('[UserDetails] –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—ÇÔøΩÔøΩ–≤—â–∏–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleDeletePicker = async () => {
    if (!currentUser || !userPicker) return;
    
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      try {
        console.log('[UserDetails] –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞:', userPicker.pickerId);
        await deletePickerMutation.mutateAsync(userPicker.pickerId);
        console.log('[UserDetails] –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatSalary = (salary?: number) => {
    if (!salary) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(salary);
  };

  const getRoleDisplayName = (role: string) => {
    const roleNames: { [key: string]: string } = {
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      management: '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
      technologist: '–¢–µ—Ö–Ω–æ–ª–æ–≥',
      master: '–ú–∞—Å—Ç–µ—Ä',
      operator: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
      orderPicker: '–ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤',
      workplace: '–†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ'
    };
    return roleNames[role] || role;
  };

  const getContextTypeDisplayName = (contextType: string) => {
    const contextNames: { [key: string]: string } = {
      MACHINE: '–°—Ç–∞–Ω–æ–∫',
      STAGE_LEVEL1: '–≠—Ç–∞–ø',
      ORDER_PICKER: '–ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫'
    };
    return contextNames[contextType] || contextType;
  };

  const getAvailableGlobalRoles = () => {
    if (!availableRoles || !userRoles) return [];
    return availableRoles.roles.filter(role => !userRoles.globalRoles.includes(role));
  };

  const getContextOptions = () => {
    switch (selectedContextType) {
      case 'MACHINE':
        return contextMachines.map(m => ({ id: m.machineId, name: m.machineName }));
      case 'STAGE_LEVEL1':
        return contextStages.map(s => ({ id: s.stageId, name: s.stageName }));
      case 'ORDER_PICKER':
        return contextPickers.map(p => ({ id: p.pickerId, name: p.pickerName }));
      default:
        return [];
    }
  };

  const getAvailableRolesForContext = (contextType: ContextType) => {
    if (!availableRoles) return [];
    
    switch (contextType) {
      case 'MACHINE':
        return ['workplace'];
      case 'STAGE_LEVEL1':
        return ['master', 'operator'];
      case 'ORDER_PICKER':
        return ['orderPicker'];
      default:
        return [];
    }
  };

  if (!currentUser) {
    return (
      <div className={styles.container}>
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>üë§</div>
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <div className={styles.titleSection}>
          <div className={styles.userAvatar}>
            {currentUser.userDetail.firstName[0]}{currentUser.userDetail.lastName[0]}
          </div>
          <div className={styles.userInfo}>
            <h2 className={styles.title}>
              {currentUser.userDetail.firstName} {currentUser.userDetail.lastName}
            </h2>
            <div className={styles.userLogin}>@{currentUser.login}</div>
            {userPicker && (
              <div className={styles.userBadge}>
                üè∑Ô∏è –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫ ID: {userPicker.pickerId}
              </div>
            )}
          </div>
        </div>
        
        <div className={styles.tabs}>
          <button
            className={`${styles.tab} ${activeTab === 'info' ? styles.tabActive : ''}`}
            onClick={() => setActiveTab('info')}
          >
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </button>
          <button
            className={`${styles.tab} ${activeTab === 'roles' ? styles.tabActive : ''}`}
            onClick={() => setActiveTab('roles')}
          >
            –†–æ–ª–∏ –∏ –ø—Ä–∏–≤—è–∑–∫–∏
          </button>
          <button
            className={`${styles.tab} ${activeTab === 'picker' ? styles.tabActive : ''}`}
            onClick={() => setActiveTab('picker')}
          >
            –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫
            {userPicker && <span className={styles.tabBadge}>‚úì</span>}
          </button>
        </div>
      </div>

      <div className={styles.content}>
        {activeTab === 'info' && (
          <div className={styles.infoTab}>
            <div className={styles.infoGrid}>
              <div className={styles.infoCard}>
                <h3 className={styles.infoCardTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>ID:</span>
                  <span className={styles.infoValue}>{currentUser.userId}</span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–õ–æ–≥–∏–Ω:</span>
                  <span className={styles.infoValue}>{currentUser.login}</span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–ò–º—è:</span>
                  <span className={styles.infoValue}>{currentUser.userDetail.firstName}</span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–§–∞–º–∏–ª–∏—è:</span>
                  <span className={styles.infoValue}>{currentUser.userDetail.lastName}</span>
                </div>
              </div>

              <div className={styles.infoCard}>
                <h3 className={styles.infoCardTitle}>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                  <span className={styles.infoValue}>
                    {currentUser.userDetail.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                  </span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</span>
                  <span className={styles.infoValue}>
                    {currentUser.userDetail.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                  </span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–ó–∞—Ä–ø–ª–∞—Ç–∞:</span>
                  <span className={styles.infoValue}>
                    {formatSalary(currentUser.userDetail.salary)}
                  </span>
                </div>
              </div>

              <div className={styles.infoCard}>
                <h3 className={styles.infoCardTitle}>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–°–æ–∑–¥–∞–Ω:</span>
                  <span className={styles.infoValue}>
                    {formatDate(currentUser.createdAt)}
                  </span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–û–±–Ω–æ–≤–ª–µ–Ω:</span>
                  <span className={styles.infoValue}>
                    {formatDate(currentUser.updatedAt)}
                  </span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —ÄÔøΩÔøΩ–ª–µ–π:</span>
                  <span className={styles.infoValue}>
                    {userRoles?.globalRoles.length || 0}
                  </span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫:</span>
                  <span className={styles.infoValue}>
                    {userRoles?.roleBindings.length || 0}
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'roles' && (
          <div className={styles.rolesTab}>
            {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ */}
            <div className={styles.globalRolesSection}>
              <div className={styles.sectionHeader}>
                <h3 className={styles.sectionTitle}>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏</h3>
                <button
                  onClick={() => setShowAddRoleModal(true)}
                  className={styles.addButton}
                  disabled={getAvailableGlobalRoles().length === 0}
                >
                  + –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å
                </button>
              </div>
              
              <div className={styles.rolesList}>
                {(!userRoles?.globalRoles || userRoles.globalRoles.length === 0) ? (
                  <div className={styles.emptyList}>
                    <p>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</p>
                  </div>
                ) : (
                  userRoles.globalRoles.map((role) => (
                    <div key={role} className={styles.roleItem}>
                      <div className={styles.roleInfo}>
                        <h4 className={styles.roleName}>{getRoleDisplayName(role)}</h4>
                        <p className={styles.roleCode}>({role})</p>
                      </div>
                      <button
                        onClick={() => handleRemoveGlobalRole(role)}
                        className={styles.removeButton}
                        disabled={removeGlobalRoleMutation.isPending}
                      >
                        {removeGlobalRoleMutation.isPending ? '‚è≥' : 'üóëÔ∏è'}
                      </button>
                    </div>
                  ))
                )}
              </div>
            </div>

            {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ */}
            <div className={styles.bindingsSection}>
              <div className={styles.sectionHeader}>
                <h3 className={styles.sectionTitle}>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏</h3>
                <button
                  onClick={() => setShowAddBindingModal(true)}
                  className={styles.addButton}
                >
                  + –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É
                </button>
              </div>
              
              <div className={styles.bindingsList}>
                {(!userRoles?.roleBindings || userRoles.roleBindings.length === 0) ? (
                  <div className={styles.emptyList}>
                    <p>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</p>
                  </div>
                ) : (
                  userRoles.roleBindings.map((binding) => (
                    <div key={binding.id} className={styles.bindingItem}>
                      <div className={styles.bindingInfo}>
                        <h4 className={styles.bindingRole}>{getRoleDisplayName(binding.role)}</h4>
                        <p className={styles.bindingContext}>
                          {getContextTypeDisplayName(binding.contextType)}: {binding.contextName}
                        </p>
                        <span className={styles.bindingId}>ID: {binding.id}</span>
                      </div>
                      <button
                        onClick={() => handleRemoveRoleBinding(binding.id, `${binding.role} - ${binding.contextName}`)}
                        className={styles.removeButton}
                        disabled={removeBindingMutation.isPending}
                      >
                        {removeBindingMutation.isPending ? '‚è≥' : 'üóëÔ∏è'}
                      </button>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'picker' && (
          <div className={styles.pickerTab}>
            <div className={styles.pickerSection}>
              <div className={styles.sectionHeader}>
                <h3 className={styles.sectionTitle}>–ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫</h3>
                {!userPicker ? (
                  <button
                    onClick={() => setShowCreatePickerModal(true)}
                    className={styles.addButton}
                  >
                    + –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞
                  </button>
                ) : (
                  <button
                    onClick={handleDeletePicker}
                    className={styles.deleteButton}
                    disabled={deletePickerMutation.isPending}
                  >
                    {deletePickerMutation.isPending ? '‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ...' : 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞'}
                  </button>
                )}
              </div>
              
              {!userPicker ? (
                <div className={styles.emptyState}>
                  <div className={styles.emptyIcon}>üì¶</div>
                  <h4>–ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω</h4>
                  <p>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–æ–º</p>
                  <p className={styles.hint}>
                    –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–∫–∞–∑–∞–º–∏
                  </p>
                </div>
              ) : (
                <div className={styles.pickerInfo}>
                  <div className={styles.pickerCard}>
                    <div className={styles.pickerHeader}>
                      <div className={styles.pickerIcon}>üì¶</div>
                      <div className={styles.pickerTitleSection}>
                        <h4 className={styles.pickerTitle}>
                          –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫ #{userPicker.pickerId}
                        </h4>
                        <p className={styles.pickerSubtitle}>
                          {userPicker.user.userDetail.firstName} {userPicker.user.userDetail.lastName}
                        </p>
                      </div>
                      <div className={styles.pickerStatus}>
                        <span className={styles.statusBadge}>
                          {hasPickerRole ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ö†Ô∏è –ù–µ—Ç —Ä–æ–ª–∏'}
                        </span>
                      </div>
                    </div>
                    
                    <div className={styles.pickerDetails}>
                      <div className={styles.pickerRow}>
                        <span className={styles.pickerLabel}>ID –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞:</span>
                        <span className={styles.pickerValue}>{userPicker.pickerId}</span>
                      </div>
                      <div className={styles.pickerRow}>
                        <span className={styles.pickerLabel}>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
                        <span className={styles.pickerValue}>{userPicker.userId}</span>
                      </div>
                      <div className={styles.pickerRow}>
                        <span className={styles.pickerLabel}>–õ–æ–≥–∏–Ω:</span>
                        <span className={styles.pickerValue}>{userPicker.user.login}</span>
                      </div>
                      <div className={styles.pickerRow}>
                        <span className={styles.pickerLabel}>–°–æ–∑–¥–∞–Ω:</span>
                        <span className={styles.pickerValue}>
                          {formatDate(userPicker.createdAt)}
                        </span>
                      </div>
                      <div className={styles.pickerRow}>
                        <span className={styles.pickerLabel}>–†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞:</span>
                        <span className={styles.pickerValue}>
                          {hasPickerRole ? '–î–∞' : '–ù–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å orderPicker)'}
                        </span>
                      </div>
                    </div>

                    {!hasPickerRole && (
                      <div className={styles.pickerWarning}>
                        <p>‚ö†Ô∏è –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ä–æ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</p>
                        <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–†–æ–ª–∏ –∏ –ø—Ä–∏–≤—è–∑–∫–∏", —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å orderPicker</p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ */}
      {showAddRoleModal && (
        <div className={styles.modalOverlay} onClick={() => setShowAddRoleModal(false)}>
          <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
            <div className={styles.modalHeader}>
              <h3>–î–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å</h3>
              <button 
                onClick={() => setShowAddRoleModal(false)}
                className={styles.closeButton}
              >
                ‚úï
              </button>
            </div>
            <div className={styles.modalContent}>
              <div className={styles.roleOptions}>
                {getAvailableGlobalRoles().map((role) => (
                  <div key={role} className={styles.roleOption}>
                    <div className={styles.roleOptionInfo}>
                      <h4>{getRoleDisplayName(role)}</h4>
                      <p>({role})</p>
                    </div>
                    <button
                      onClick={() => handleAssignGlobalRole(role)}
                      className={styles.selectButton}
                      disabled={assignGlobalRoleMutation.isPending}
                    >
                      {assignGlobalRoleMutation.isPending ? '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ...' : '–ù–∞–∑–Ω–∞—á–∏—Ç—å'}
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ */}
      {showAddBindingModal && (
        <div className={styles.modalOverlay} onClick={() => setShowAddBindingModal(false)}>
          <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
            <div className={styles.modalHeader}>
              <h3>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É</h3>
              <button 
                onClick={() => setShowAddBindingModal(false)}
                className={styles.closeButton}
              >
                ‚úï
              </button>
            </div>
            <div className={styles.modalContent}>
              <div className={styles.contextTypeSelector}>
                <label className={styles.selectLabel}>–¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:</label>
                <select
                  value={selectedContextType}
                  onChange={(e) => setSelectedContextType(e.target.value as ContextType)}
                  className={styles.select}
                >
                  <option value="MACHINE">–°—Ç–∞–Ω–æ–∫</option>
                  <option value="STAGE_LEVEL1">–≠—Ç–∞–ø</option>
                  <option value="ORDER_PICKER">–ö–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫</option>
                </select>
              </div>

              <div className={styles.bindingOptions}>
                {getAvailableRolesForContext(selectedContextType).map((role) => (
                  <div key={role} className={styles.roleSection}>
                    <h4 className={styles.roleSectionTitle}>{getRoleDisplayName(role)}</h4>
                    <div className={styles.contextOptions}>
                      {getContextOptions().map((context) => (
                        <div key={context.id} className={styles.contextOption}>
                          <div className={styles.contextOptionInfo}>
                            <span>{context.name}</span>
                            <small>ID: {context.id}</small>
                          </div>
                          <button
                            onClick={() => handleCreateRoleBinding(role, context.id)}
                            className={styles.selectButton}
                            disabled={createBindingMutation.isPending}
                          >
                            {createBindingMutation.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞ */}
      {showCreatePickerModal && (
        <div className={styles.modalOverlay} onClick={() => setShowCreatePickerModal(false)}>
          <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
            <div className={styles.modalHeader}>
              <h3>–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞</h3>
              <button 
                onClick={() => setShowCreatePickerModal(false)}
                className={styles.closeButton}
              >
                ‚úï
              </button>
            </div>
            <div className={styles.modalContent}>
              <div className={styles.confirmationContent}>
                <div className={styles.confirmationIcon}>üì¶</div>
                <h4>–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</h4>
                <p>
                  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <strong>{currentUser.userDetail.firstName} {currentUser.userDetail.lastName}</strong> 
                  —Å—Ç–∞–Ω–µ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–æ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ä–æ–ª—å orderPicker.
                </p>
                <div className={styles.confirmationActions}>
                  <button
                    onClick={() => setShowCreatePickerModal(false)}
                    className={styles.cancelButton}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={handleCreatePicker}
                    className={styles.confirmButton}
                    disabled={createPickerWithRoleMutation.isPending}
                  >
                    {createPickerWithRoleMutation.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
