import React, { useState } from 'react';
import { useMachines, useDeleteMachine, useStagesStatistics } from '../hooks/useMachinesQuery';
import { Machine, MachineStatus } from '../MachineSettings';
import styles from './MachineList.module.css';

interface MachineListProps {
  onMachineSelect: (machine: Machine) => void;
  onMachineEdit: (machineId: number) => void;
  onMachineDeleted: (machineId: number) => void;
  selectedMachineId?: number;
}

export const MachineList: React.FC<MachineListProps> = ({
  onMachineSelect,
  onMachineEdit,
  onMachineDeleted,
  selectedMachineId,
}) => {
  const [filter, setFilter] = useState<{
    status?: MachineStatus;
    search?: string;
  }>({});

  const { data: machines = [], isLoading, error } = useMachines();
  const { data: statistics } = useStagesStatistics();
  const deleteMachineMutation = useDeleteMachine();

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–∫–æ–≤
  const filteredMachines = machines.filter(machine => {
    if (filter.status && machine.status !== filter.status) {
      return false;
    }
    if (filter.search && !machine.machineName.toLowerCase().includes(filter.search.toLowerCase())) {
      return false;
    }
    return true;
  });

  const handleDeleteMachine = async (machineId: number, machineName: string) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–æ–∫ "${machineName}"?`)) {
      try {
        await deleteMachineMutation.mutateAsync(machineId);
        onMachineDeleted(machineId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  const getStatusBadge = (status: MachineStatus) => {
    const statusConfig = {
      [MachineStatus.ACTIVE]: { text: '–ê–∫—Ç–∏–≤–µ–Ω', className: styles.statusActive },
      [MachineStatus.INACTIVE]: { text: '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω', className: styles.statusInactive },
      [MachineStatus.MAINTENANCE]: { text: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', className: styles.statusMaintenance },
    };

    const config = statusConfig[status];
    return (
      <div className={`${styles.machineStatus} ${config.className}`}>
        <span className={styles.statusDot}></span>
        {config.text}
      </div>
    );
  };

  const getStagesCount = (machine: Machine) => {
    const stagesCount = machine.machinesStages?.length || 0;
    const substagesCount = machine.machineSubstages?.length || 0;
    return `${stagesCount} —ç—Ç–∞–ø–æ–≤, ${substagesCount} –ø–æ–¥—ç—Ç–∞–ø–æ–≤`;
  };

  if (isLoading) {
    return (
      <div className={styles.machineListContainer}>
        <div className={styles.listHeader}>
          <h2 className={styles.formTitle}>–°—Ç–∞–Ω–∫–∏</h2>
        </div>
        <div className={styles.loadingContainer}>
          <div className={styles.spinner}></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.machineListContainer}>
        <div className={styles.listHeader}>
          <h2 className={styles.formTitle}>–°—Ç–∞–Ω–∫–∏</h2>
        </div>
        <div className={styles.errorContainer}>
          <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error.message}</p>
          <button 
            onClick={() => window.location.reload()} 
            className={styles.submitButton}
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.machineListContainer}>
      <div className={styles.listHeader}>
        <div className={styles.searchContainer}>
          <span className={styles.searchIcon}>üîç</span>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
            value={filter.search || ''}
            onChange={(e) => setFilter(prev => ({ ...prev, search: e.target.value }))}
            className={styles.searchInput}
          />
        </div>
        
        <div className={styles.resultsCount}>
          –ù–∞–π–¥–µ–Ω–æ: {filteredMachines.length} –∏–∑ {machines.length}
        </div>
        
        {statistics && (
          <div className={styles.statsGrid}>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üè≠</div>
              <div className={styles.statInfo}>
                <div className={styles.statValue}>{statistics.machines}</div>
                <div className={styles.statLabel}>–≤—Å–µ–≥–æ —Å—Ç–∞–Ω–∫–æ–≤</div>
              </div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üîó</div>
              <div className={styles.statInfo}>
                <div className={styles.statValue}>{statistics.machineStageConnections}</div>
                <div className={styles.statLabel}>—Å–≤—è–∑–µ–π —ç—Ç–∞–ø–æ–≤</div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className={styles.filtersContainer}>
        <div className={styles.filterGroup}>
          <label className={styles.filterLabel}>–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:</label>
          <select
            value={filter.status || ''}
            onChange={(e) => setFilter(prev => ({ 
              ...prev, 
              status: e.target.value as MachineStatus || undefined 
            }))}
            className={styles.filterSelect}
          >
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value={MachineStatus.ACTIVE}>–ê–∫—Ç–∏–≤–µ–Ω</option>
            <option value={MachineStatus.INACTIVE}>–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
            <option value={MachineStatus.MAINTENANCE}>–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–∫–æ–≤ */}
      <div className={styles.machinesList}>
        {filteredMachines.length === 0 ? (
          <div className={styles.emptyState}>
            <div className={styles.emptyStateIcon}>üè≠</div>
            <h3 className={styles.emptyStateTitle}>–°—Ç–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className={styles.emptyStateDescription}>
              {filter.search || filter.status 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                : '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å—Ç–∞–Ω–æ–∫, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–æ–∫"'
              }
            </p>
          </div>
        ) : (
          filteredMachines.map((machine) => (
            <div
              key={machine.machineId}
              className={`${styles.machineCard} ${
                selectedMachineId === machine.machineId ? styles.machineSelected : ''
              }`}
              onClick={() => onMachineSelect(machine)}
            >
              <div className={styles.machineInfo}>
                <div className={styles.machineHeader}>
                  <h3 className={styles.machineName}>{machine.machineName}</h3>
                  {getStatusBadge(machine.status)}
                </div>

                <div className={styles.machineDetails}>
                  <div className={styles.loadInfo}>
                    <span className={styles.loadLabel}>–ù–∞–≥—Ä—É–∑–∫–∞:</span>
                    <div className={styles.loadValue}>
                      {machine.recommendedLoad}
                      <span className={styles.loadUnit}>{machine.loadUnit}</span>
                    </div>
                  </div>
                  
                  <div className={styles.stagesInfo}>
                    <span className={styles.stagesLabel}>–°–≤—è–∑–∏:</span>
                    <span className={styles.stagesCount}>
                      {getStagesCount(machine)}
                    </span>
                  </div>
                </div>

                {/* –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ */}
                {machine.machinesStages && machine.machinesStages.length > 0 && (
                  <div className={styles.stagesPreview}>
                    <span className={styles.previewLabel}>–≠—Ç–∞–ø—ã:</span>
                    <div className={styles.stagesTags}>
                      {machine.machinesStages.slice(0, 3).map((machineStage) => (
                        <span key={machineStage.machineStageId} className={styles.stageTag}>
                          {machineStage.stage.stageName}
                        </span>
                      ))}
                      {machine.machinesStages.length > 3 && (
                        <span className={styles.stageTag}>
                          +{machine.machinesStages.length - 3}
                        </span>
                      )}
                    </div>
                  </div>
                )}

                {/* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–∞ */}
                <div className={styles.machineFeatures}>
                  <span className={styles.featuresLabel}>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</span>
                  <div className={styles.featuresTags}>
                    <span className={`${styles.featureTag} ${machine.noSmenTask ? styles.taskChangeableTag : ''}`}>
                      {machine.noSmenTask ? '–ë–µ–∑ —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è' : '–°–æ —Å–º–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏'}
                    </span>
                  </div>
                </div>
              </div>
              
              <div className={styles.machineActions}>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    onMachineEdit(machine.machineId);
                  }}
                  className={`${styles.actionButton} ${styles.editButton}`}
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                >
                  ‚úè –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleDeleteMachine(machine.machineId, machine.machineName);
                  }}
                  className={`${styles.actionButton} ${styles.deleteButton}`}
                  title="–£–¥–∞–ª–∏—Ç—å"
                  disabled={deleteMachineMutation.isPending}
                >
                  {deleteMachineMutation.isPending ? '‚è≥' : 'üóëÔ∏è'}
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};