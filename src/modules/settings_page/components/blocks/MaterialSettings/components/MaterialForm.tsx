// ================================================
// src/modules/materials/components/MaterialForm.tsx
// ================================================
import React, { useState, useEffect } from 'react';
import {
  useMaterialGroups,
  useMaterial,
  useCreateMaterial,
  useUpdateMaterial,
} from '../api';

import { CreateMaterialDto, UpdateMaterialDto } from '../types';
import styles from './MaterialForm.module.css';

interface MaterialFormProps {
  editId?: number;
  onSaved?: () => void;
  onCancel?: () => void;
}

export const MaterialForm: React.FC<MaterialFormProps> = ({ 
  editId, 
  onSaved, 
  onCancel 
}) => {
  const [formData, setFormData] = useState({
    name: '',
    article: '',
    unit: '',
    selectedGroups: [] as number[]
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  const isEditing = !!editId;

  // React Query —Ö—É–∫–∏
  const { data: groups = [], isLoading: groupsLoading } = useMaterialGroups();
  const { data: material, isLoading: materialLoading } = useMaterial(editId || 0);
  const createMutation = useCreateMaterial();
  const updateMutation = useUpdateMaterial();



  const loading = createMutation.isPending || updateMutation.isPending;

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (material && editId) {
      setFormData({
        name: material.materialName,
        article: material.article,
        unit: material.unit,
        selectedGroups: material.groups?.map(g => g.groupId) || []
      });
    }
  }, [material, editId]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.name.trim().length < 2) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    if (!formData.article.trim()) {
      newErrors.article = '–ê—Ä—Ç–∏–∫—É–ª –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.unit.trim()) {
      newErrors.unit = '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    setErrors({});

    try {
      const dto = {
        materialName: formData.name.trim(),
        article: formData.article.trim(),
        unit: formData.unit.trim(),
        groupIds: formData.selectedGroups
      };

      if (isEditing) {
        await updateMutation.mutateAsync({ id: editId!, dto: dto as UpdateMaterialDto });
        console.log('–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        await createMutation.mutateAsync(dto as CreateMaterialDto);
        console.log('–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      }

      // –í—ã–∑—ã–≤–∞–µ–º callback —É—Å–ø–µ—Ö–∞ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      onSaved?.();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      onCancel?.();
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞';
      setErrors({ general: errorMessage });
      console.error('–û—à–∏–±–∫–∞ –ø—ÄÔøΩÔøΩ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', err);
    }
  };

  const handleGroupToggle = (groupId: number) => {
    setFormData(prev => ({
      ...prev,
      selectedGroups: prev.selectedGroups.includes(groupId)
        ? prev.selectedGroups.filter(id => id !== groupId)
        : [...prev.selectedGroups, groupId]
    }));
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handleClose = () => {
    setFormData({
      name: '',
      article: '',
      unit: '',
      selectedGroups: []
    });
    setErrors({});
    onCancel?.();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && e.ctrlKey) {
      handleSubmit(e as any);
    }
    if (e.key === 'Escape') {
      handleClose();
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  if (isEditing && materialLoading) {
    return (
      <div className={styles.formCard}>
        <div className={styles.formHeader}>
          <h2 className={styles.formTitle}>
            <span className={styles.formIcon}>‚úèÔ∏è</span>
            –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...
            {/* Socket.IO –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
            
          </h2>
        </div>
        <div className={styles.formContent}>
          <div className={styles.loadingState}>
            <div className={styles.spinner}></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.formCard}>
      <div className={styles.formHeader}>
        <h2 className={styles.formTitle}>
          <span className={styles.formIcon}>
            {isEditing ? '‚úèÔ∏è' : '‚ûï'}
          </span>
          {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª'}
          {/* Socket.IO –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
          
        </h2>
        <button
          onClick={handleClose}
          className={styles.closeButton}
          type="button"
          title="–ó–∞–∫—Ä—ã—Ç—å"
        >
          √ó
        </button>
      </div>

      <form onSubmit={handleSubmit} className={styles.formContent}>
        {/* Connection Warning */}
        

        {/* General Error */}
        {(errors.general || createMutation.error || updateMutation.error) && (
          <div className={styles.errorMessage}>
            <span className={styles.errorIcon}>‚ö†Ô∏è</span>
            {errors.general || 
             createMutation.error?.message || 
             updateMutation.error?.message || 
             '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'}
          </div>
        )}

     
        {/* –ê—Ä—Ç–∏–∫—É–ª –º–∞—Ç–µ—Ä–∏–∞–ª–∞ */}
        <div className={styles.formGroup}>
          <label className={styles.formLabel}>
            –ê—Ä—Ç–∏–∫—É–ª –º–∞—Ç–µ—Ä–∏–∞–ª–∞ *
          </label>
          <input
            type="text"
            value={formData.article}
            onChange={(e) => handleInputChange('article', e.target.value)}
            onKeyPress={handleKeyPress}
            className={`${styles.formInput} ${errors.article ? styles.inputError : ''}`}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê-123"
            disabled={loading}
            autoFocus
          />
          {errors.article && (
            <div className={styles.fieldError}>
              {errors.article}
            </div>
          )}
        </div>

        {/* Material Name */}
        <div className={styles.formGroup}>
          <label className={styles.formLabel}>
            –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ *
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => handleInputChange('name', e.target.value)}
            onKeyPress={handleKeyPress}
            className={`${styles.formInput} ${errors.name ? styles.inputError : ''}`}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∞–ª—å –ª–∏—Å—Ç–æ–≤–∞—è"
            disabled={loading}
          />
          {errors.name && (
            <div className={styles.fieldError}>
              {errors.name}
            </div>
          )}
        </div>

        {/* Unit */}
        <div className={styles.formGroup}>
          <label className={styles.formLabel}>
            –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è *
          </label>
          <select
            value={formData.unit}
            onChange={(e) => handleInputChange('unit', e.target.value)}
            className={`${styles.formInput} ${errors.unit ? styles.inputError : ''}`}
            disabled={loading}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è</option>
            <option value="–º">–º</option>
            <option value="–º¬≤">–º¬≤</option>
            <option value="–º¬≥">–º¬≥</option>
            <option value="—à—Ç">—à—Ç</option>
            <option value="–∫–≥">–∫–≥</option>
          </select>
          {errors.unit && (
            <div className={styles.fieldError}>
              {errors.unit}
            </div>
          )}
        </div>

        {/* Groups Selection */}
        <div className={styles.formGroup}>
          <label className={styles.formLabel}>
            –ì—Ä—É–ø–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            <span className={styles.optional}>(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>
           
          </label>
          
          {groupsLoading ? (
            <div className={styles.groupsLoading}>
              <div className={styles.spinner}></div>
              <span>–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...</span>
            </div>
          ) : groups.length === 0 ? (
            <div className={styles.noGroups}>
              <span className={styles.noGroupsIcon}>üìÅ</span>
              <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø</p>
              <p className={styles.noGroupsSubtext}>
                –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
              </p>
            </div>
          ) : (
            <div className={styles.groupsSelector}>
              <div className={styles.groupsGrid}>
                {groups.map((group) => (
                  <div
                    key={group.groupId}
                    className={`${styles.groupOption} ${
                      formData.selectedGroups.includes(group.groupId) 
                        ? styles.groupOptionSelected 
                        : ''
                    }`}
                    onClick={() => handleGroupToggle(group.groupId)}
                  >
                    <div className={styles.groupOptionContent}>
                      <div className={styles.groupOptionIcon}>
                        {formData.selectedGroups.includes(group.groupId) ? '‚úÖ' : 'üìÅ'}
                      </div>
                      <div className={styles.groupOptionInfo}>
                        <div className={styles.groupOptionName}>
                          {group.groupName}
                        </div>
                        <div className={styles.groupOptionCount}>
                          {group.materialsCount || 0} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {formData.selectedGroups.length > 0 && (
                <div className={styles.selectedGroupsSummary}>
                  <span className={styles.selectedGroupsLabel}>
                    –í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {formData.selectedGroups.length}
                  </span>
                  <button
                    type="button"
                    onClick={() => setFormData(prev => ({ ...prev, selectedGroups: [] }))}
                    className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonMini}`}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
                  </button>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Form Actions */}
        <div className={styles.formActions}>
          <button
            type="submit"
            disabled={loading || !formData.name.trim() || !formData.article.trim() || !formData.unit.trim()}
            className={`${styles.button} ${styles.buttonPrimary} ${styles.buttonLarge}`}
          >
            {loading ? (
              <>
                <span className={styles.buttonSpinner}></span>
                {isEditing ? '–û–±–Ω–æ–≤–ª—è–µ–º...' : '–°–æ–∑–¥–∞–µ–º...'}
              </>
            ) : (
              <>
                <span className={styles.buttonIcon}>
                  {isEditing ? 'üíæ' : '‚ûï'}
                </span>
                {isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª' : '–°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª'}
              </>
            )}
          </button>
          
          <button
            type="button"
            onClick={handleClose}
            disabled={loading}
            className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonLarge}`}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>

        {/* Help Text */}
        <div className={styles.formHelp}>
          <div className={styles.helpText}>
            <span className={styles.helpIcon}>üí°</span>
            {isEditing 
              ? '–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"' 
              : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª" –∏–ª–∏ Ctrl+Enter'
            }
          </div>
          <div className={styles.helpText}>
            <span className={styles.helpIcon}>‚ö°</span>
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Escape –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
          </div>
          
        </div>
      </form>
    </div>
  );
};