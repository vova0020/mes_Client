import { useEffect } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { useSocket } from '../../../../../../contexts/SocketContext';
import { QUERY_KEYS } from '../api';
import { Material, MaterialGroup } from '../types';

interface MaterialSocketEvent {
  material: Material;
  timestamp: string;
}

interface MaterialDeletedEvent {
  materialId: number;
  materialName: string;
  timestamp: string;
}

interface MaterialGroupLinkEvent {
  groupId: number;
  materialId: number;
  groupName: string;
  materialName: string;
  timestamp: string;
}

interface MaterialGroupSocketEvent {
  group: MaterialGroup;
  timestamp: string;
}

interface MaterialGroupDeletedEvent {
  groupId: number;
  groupName: string;
  timestamp: string;
}

export const useMaterialsSocket = () => {
  const { socket, isConnected } = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket || !isConnected) return;

    console.log('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');

    // =============== –ú–ê–¢–ï–†–ò–ê–õ–´ ===============

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const handleMaterialCreated = (data: MaterialSocketEvent) => {
      console.log('üì¶ Socket: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materials });
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∫–∞–∫ —Å—á–µ—Ç—á–∏–∫–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      // toast.success(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: ${data.material.materialName}`);
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const handleMaterialUpdated = (data: MaterialSocketEvent) => {
      console.log('üìù Socket: –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫—ç—à–µ
      queryClient.setQueryData(
        QUERY_KEYS.material(data.material.materialId), 
        data.material
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materials });
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∫–∞–∫ —Å–≤—è–∑–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });

      // toast.info(`–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${data.material.materialName}`);
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const handleMaterialDeleted = (data: MaterialDeletedEvent) => {
      console.log('üóëÔ∏è Socket: –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω:', data);
      
      // –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∫—ç—à–∞
      queryClient.removeQueries({ queryKey: QUERY_KEYS.material(data.materialId) });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materials });
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∫–∞–∫ —Å—á–µ—Ç—á–∏–∫–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });

      // toast.warning(`–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω: ${data.materialName}`);
    };

    // –ü—Ä–∏–≤—è–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ –≥—Ä—É–ø–ø–µ
    const handleMaterialLinkedToGroup = (data: MaterialGroupLinkEvent) => {
      console.log('üîó Socket: –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.material(data.materialId) });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialsByGroup(data.groupId) });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materials });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã (—Å—á–µ—Ç—á–∏–∫–∏)
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });

      // toast.success(`${data.materialName} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ ${data.groupName}`);
    };

    // –û—Ç–≤—è–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç –≥—Ä—É–ø–ø—ã
    const handleMaterialUnlinkedFromGroup = (data: MaterialGroupLinkEvent) => {
      console.log('üîì Socket: –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≥—Ä—É–ø–ø—ã:', data);
      
      // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–∏–≤—è–∑–∫–µ
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.material(data.materialId) });
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialsByGroup(data.groupId) });
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materials });
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });

      // toast.info(`${data.materialName} –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≥—Ä—É–ø–ø—ã ${data.groupName}`);
    };

    // =============== –ì–†–£–ü–ü–´ –ú–ê–¢–ï–†–ò–ê–õ–û–í ===============

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    const handleMaterialGroupCreated = (data: MaterialGroupSocketEvent) => {
      console.log('üìÅ Socket: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });

      // toast.success(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: ${data.group.groupName}`);
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    const handleMaterialGroupUpdated = (data: MaterialGroupSocketEvent) => {
      console.log('üìù Socket: –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });

      // toast.info(`–ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${data.group.groupName}`);
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    const handleMaterialGroupDeleted = (data: MaterialGroupDeletedEvent) => {
      console.log('üóëÔ∏è Socket: –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É–¥–∞–ª–µ–Ω–∞:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materialGroups });
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ç–∞–∫ –∫–∞–∫ —Å–≤—è–∑–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.materials });

      // toast.warning(`–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞: ${data.groupName}`);
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    socket.on('materialCreated', handleMaterialCreated);
    socket.on('materialUpdated', handleMaterialUpdated);
    socket.on('materialDeleted', handleMaterialDeleted);
    socket.on('materialLinkedToGroup', handleMaterialLinkedToGroup);
    socket.on('materialUnlinkedFromGroup', handleMaterialUnlinkedFromGroup);
    
    socket.on('materialGroupCreated', handleMaterialGroupCreated);
    socket.on('materialGroupUpdated', handleMaterialGroupUpdated);
    socket.on('materialGroupDeleted', handleMaterialGroupDeleted);

    // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
      
      socket.off('materialCreated', handleMaterialCreated);
      socket.off('materialUpdated', handleMaterialUpdated);
      socket.off('materialDeleted', handleMaterialDeleted);
      socket.off('materialLinkedToGroup', handleMaterialLinkedToGroup);
      socket.off('materialUnlinkedFromGroup', handleMaterialUnlinkedFromGroup);
      
      socket.off('materialGroupCreated', handleMaterialGroupCreated);
      socket.off('materialGroupUpdated', handleMaterialGroupUpdated);
      socket.off('materialGroupDeleted', handleMaterialGroupDeleted);
    };
  }, [socket, isConnected, queryClient]);

  return {
    isConnected,
    socket,
  };
};