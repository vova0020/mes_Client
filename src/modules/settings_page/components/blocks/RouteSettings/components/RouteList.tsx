import React, { useState } from 'react';
import { CircularProgress } from '@mui/material';
import { Route } from '../api/routes.api';
import { useCopyRoute } from '../hooks/useRoutes';
import styles from './RouteList.module.css';

interface RouteListProps {
    routes: Route[];
    selectedRoute: Route | null;
    setSelectedRoute: (route: Route) => void;
    onEdit: (route?: Route) => void;
    onDelete: (id: number) => void;
    isDeleting: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
const RouteCard: React.FC<{
    route: Route;
    isSelected: boolean;
    onSelect: (route: Route) => void;
    onEdit: (route: Route) => void;
    onDelete: (routeId: number) => void;
    onCopy: (route: Route) => void;
    isDeleteConfirm: boolean;
    onCancelDelete: () => void;
    isCopying: boolean;
}> = ({ 
    route, 
    isSelected, 
    onSelect, 
    onEdit, 
    onDelete, 
    onCopy, 
    isDeleteConfirm, 
    onCancelDelete,
    isCopying 
}) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const sortedStages = route.routeStages 
        ? [...route.routeStages].sort((a, b) => a.sequenceNumber - b.sequenceNumber)
        : [];

    return (
        <div 
            className={`${styles.routeCard} ${isSelected ? styles.routeCardSelected : ''}`}
            onClick={() => onSelect(route)}
        >
            <div className={styles.routeInfo}>
                <div className={styles.routeHeader}>
                    <h3 className={styles.routeName}>{route.routeName}</h3>
                    <span className={styles.routeType}>–ú–∞—Ä—à—Ä—É—Ç</span>
                </div>

                <div className={styles.routeDetails}>
                    <div className={styles.stagesInfo}>
                        <span className={styles.stagesLabel}>–≠—Ç–∞–ø–æ–≤:</span>
                        <span className={styles.stagesCount}>
                            {sortedStages.length} —à—Ç.
                        </span>
                    </div>

                    {route._count && (
                        <div className={styles.partsInfo}>
                            <span className={styles.partsLabel}>–î–µ—Ç–∞–ª–µ–π:</span>
                            <span className={styles.partsCount}>
                                {route._count.parts} —à—Ç.
                            </span>
                        </div>
                    )}
                </div>

                {/* Stages Preview */}
                {sortedStages.length > 0 && (
                    <div className={styles.stagesPreview}>
                        <span className={styles.previewLabel}>–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:</span>
                        <div className={styles.stagesTags}>
                            {sortedStages.slice(0, 3).map((stage, index, arr) => (
                                <span key={stage.routeStageId} className={styles.stageTag}>
                                    {index + 1}. {stage.stage.stageName}
                                    {stage.substage ? ` ‚Üí ${stage.substage.substageName}` : ''}
                                    {index < arr.length - 1 ? ',' : ''}
                                </span>
                            ))}
                            {sortedStages.length > 3 && (
                                <span className={styles.stageTag}>
                                    +{sortedStages.length - 3} –µ—â–µ
                                </span>
                            )}
                        </div>
                    </div>
                )}
            </div>

            <div className={styles.routeActions}>
                <button
                    onClick={(e) => {
                        e.stopPropagation();
                        onCopy(route);
                    }}
                    className={`${styles.actionButton} ${styles.copyButton}`}
                    title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"
                    disabled={isCopying}
                >
                    {isCopying ? <CircularProgress size={16} /> : 'üìã'}
                </button>

                <button
                    onClick={(e) => {
                        e.stopPropagation();
                        onEdit(route);
                    }}
                    className={`${styles.actionButton} ${styles.editButton}`}
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"
                >
                    ‚úèÔ∏è
                </button>

                <button
                    onClick={(e) => {
                        e.stopPropagation();
                        onDelete(route.routeId);
                    }}
                    className={`${styles.actionButton} ${isDeleteConfirm
                        ? styles.confirmDeleteButton
                        : styles.deleteButton
                    }`}
                    title={
                        isDeleteConfirm
                            ? "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
                            : "–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"
                    }
                >
                    {isDeleteConfirm ? '‚úì' : 'üóëÔ∏è'}
                </button>

                {isDeleteConfirm && (
                    <button
                        onClick={(e) => {
                            e.stopPropagation();
                            onCancelDelete();
                        }}
                        className={`${styles.actionButton} ${styles.cancelButton}`}
                        title="–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
                    >
                        ‚úï
                    </button>
                )}
            </div>
        </div>
    );
};

const RouteList: React.FC<RouteListProps> = ({
    routes,
    selectedRoute,
    setSelectedRoute,
    onEdit,
    onDelete,
    isDeleting
}) => {
    const [searchTerm, setSearchTerm] = useState('');
    const [deleteConfirmId, setDeleteConfirmId] = useState<number | null>(null);
    const copyRouteMutation = useCopyRoute();

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const filteredRoutes = routes.filter((route: Route) =>
        route.routeName.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const handleCopyRoute = async (route: Route) => {
        try {
            await copyRouteMutation.mutateAsync({
                id: route.routeId,
                newRouteName: `${route.routeName} (–∫–æ–ø–∏—è)`
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        }
    };

    const handleDelete = (routeId: number) => {
        if (deleteConfirmId === routeId) {
            onDelete(routeId);
            setDeleteConfirmId(null);
        } else {
            setDeleteConfirmId(routeId);
        }
    };

    const handleCancelDelete = () => {
        setDeleteConfirmId(null);
    };

    return (
        <div className={styles.routesListContainer}>
            {/* Header with search */}
            <div className={styles.listHeader}>
                <div className={styles.searchContainer}>
                    <input
                        type="text"
                        placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className={styles.searchInput}
                    />
                    <span className={styles.searchIcon}>üîç</span>
                </div>
                <div className={styles.resultsCount}>
                    –ù–∞–π–¥–µ–Ω–æ: {filteredRoutes.length} –∏–∑ {routes.length}
                </div>
            </div>

            {/* Routes List */}
            <div className={styles.routesList}>
                {filteredRoutes.length === 0 ? (
                    <div className={styles.emptyState}>
                        <p>
                            {searchTerm
                                ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                                : '–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã'
                            }
                        </p>
                    </div>
                ) : (
                    filteredRoutes.map((route: Route) => (
                        <RouteCard
                            key={route.routeId}
                            route={route}
                            isSelected={selectedRoute?.routeId === route.routeId}
                            onSelect={setSelectedRoute}
                            onEdit={onEdit}
                            onDelete={handleDelete}
                            onCopy={handleCopyRoute}
                            isDeleteConfirm={deleteConfirmId === route.routeId}
                            onCancelDelete={handleCancelDelete}
                            isCopying={copyRouteMutation.isPending}
                        />
                    ))
                )}
            </div>

            {/* Loading indicator for delete operation */}
            {isDeleting && (
                <div className={styles.operationOverlay}>
                    <div className={styles.spinner}></div>
                    <p>–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...</p>
                </div>
            )}
        </div>
    );
};

export default RouteList;