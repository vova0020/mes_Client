import React from 'react';
import { Route } from '../api/routes.api';
import { useMoveRouteStage, useRoute } from '../hooks/useRoutes';
import styles from './RouteDetails.module.css';

interface RouteDetailsProps {
    selectedRoute: Route | null;
    onRouteUpdate?: (updatedRoute: Route) => void;
}

const RouteDetails: React.FC<RouteDetailsProps> = ({
    selectedRoute,
    onRouteUpdate
}) => {
    const moveRouteStage = useMoveRouteStage();
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –∫—ç—à–∞
    const { data: currentRoute } = useRoute(selectedRoute?.routeId || 0);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ fallback –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
    const routeToDisplay = currentRoute || selectedRoute;

    const handleMoveStage = async (stageId: number, direction: 'up' | 'down') => {
        if (!routeToDisplay) return;

        const sortedStages = [...routeToDisplay.routeStages].sort((a, b) => a.sequenceNumber - b.sequenceNumber);
        const currentIndex = sortedStages.findIndex(s => s.routeStageId === stageId);
        
        if (currentIndex === -1) return;
        
        let newIndex: number;
        if (direction === 'up') {
            if (currentIndex === 0) return; // –£–∂–µ –ø–µ—Ä–≤—ã–π
            newIndex = currentIndex - 1;
        } else {
            if (currentIndex === sortedStages.length - 1) return; // –£–∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
            newIndex = currentIndex + 1;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const targetStage = sortedStages[newIndex];
        const newSequenceNumber = Number(targetStage.sequenceNumber);

        console.log('Moving stage:', { 
            stageId, 
            direction, 
            currentIndex, 
            newIndex, 
            currentSequence: sortedStages[currentIndex].sequenceNumber, 
            newSequenceNumber,
            newSequenceNumberType: typeof newSequenceNumber
        });

        try {
            const updatedStages = await moveRouteStage.mutateAsync({
                stageId: Number(stageId),
                newSequenceNumber
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å callback –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            if (onRouteUpdate && updatedStages && updatedStages.length > 0) {
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ –∫—ç—à–∞
                const updatedRoute = currentRoute;
                if (updatedRoute) {
                    onRouteUpdate(updatedRoute);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞:', error);
        }
    };

    if (!routeToDisplay) {
        return (
            <div className={styles.routeDetailsContainer}>
                <div className={styles.emptyState}>
                    <div className={styles.emptyStateIcon}>üõ£Ô∏è</div>
                    <h3 className={styles.emptyStateTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç</h3>
                    <p className={styles.emptyStateDescription}>
                        –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    </p>
                </div>
            </div>
        );
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const sortedStages = [...routeToDisplay.routeStages].sort((a, b) => a.sequenceNumber - b.sequenceNumber);

    return (
        <div className={styles.routeDetailsContainer}>
            {/* Header */}
            <div className={styles.detailsHeader}>
                <div className={styles.routeMainInfo}>
                    <div className={styles.routeIcon}>üõ£Ô∏è</div>
                    <div>
                        <h2 className={styles.routeName}>{routeToDisplay.routeName}</h2>
                        <div className={styles.routeStats}>
                            <span className={styles.statBadge}>
                                –≠—Ç–∞–ø–æ–≤: {sortedStages.length}
                            </span>
                            {routeToDisplay._count && (
                                <span className={styles.statBadge}>
                                    –î–µ—Ç–∞–ª–µ–π: {routeToDisplay._count.parts}
                                </span>
                            )}
                        </div>
                    </div>
                </div>
            </div>

            <div className={styles.detailsContent}>
                {/* Stages Section */}
                {sortedStages.length > 0 ? (
                    <div className={styles.stagesSection}>
                        <h3 className={styles.sectionTitle}>
                            <span className={styles.sectionIcon}>‚öôÔ∏è</span>
                            –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        </h3>
                        <div className={styles.stageFlowHint}>
                            üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üë‚Üì –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —ç—Ç–∞–ø–æ–≤. –ü–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–µ–π.
                        </div>
                        <div className={styles.stagesFlow}>
                            {sortedStages.map((stage, index) => (
                                <React.Fragment key={stage.routeStageId}>
                                    <div className={styles.stageCard}>
                                        <div className={styles.stageNumber}>
                                            {index + 1}
                                        </div>
                                        <div className={styles.stageInfo}>
                                            <div className={styles.stageName}>
                                                {stage.stage.stageName}
                                            </div>
                                            {stage.substage && (
                                                <div className={styles.substageName}>
                                                    ‚Üí {stage.substage.substageName}
                                                </div>
                                            )}
                                        </div>
                                        <div className={styles.stageActions}>
                                            <button
                                                className={`${styles.actionButton} ${styles.moveButton}`}
                                                onClick={() => handleMoveStage(stage.routeStageId, 'up')}
                                                disabled={index === 0 || moveRouteStage.isPending}
                                                title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
                                            >
                                                ‚Üë
                                            </button>
                                            <button
                                                className={`${styles.actionButton} ${styles.moveButton}`}
                                                onClick={() => handleMoveStage(stage.routeStageId, 'down')}
                                                disabled={index === sortedStages.length - 1 || moveRouteStage.isPending}
                                                title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
                                            >
                                                ‚Üì
                                            </button>
                                        </div>
                                    </div>
                                    {index < sortedStages.length - 1 && (
                                        <div className={styles.stageArrow}></div>
                                    )}
                                </React.Fragment>
                            ))}
                        </div>
                    </div>
                ) : (
                    <div className={styles.noStagesSection}>
                        <div className={styles.noStagesIcon}>‚öôÔ∏è</div>
                        <h3 className={styles.noStagesTitle}>–≠—Ç–∞–ø—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã</h3>
                        <p className={styles.noStagesDescription}>
                            –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏. 
                            –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø—ã.
                        </p>
                    </div>
                )}

                {/* Parts Section */}
                {/* {routeToDisplay.parts && routeToDisplay.parts.length > 0 ? (
                    <div className={styles.partsSection}>
                        <h3 className={styles.sectionTitle}>
                            <span className={styles.sectionIcon}>üìã</span>
                            –î–µ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
                        </h3>
                        <div className={styles.partsList}>
                            {routeToDisplay.parts.map(part => (
                                <div key={part.partId} className={styles.partCard}>
                                    <div className={styles.partIcon}>üìã</div>
                                    <div className={styles.partInfo}>
                                        <div className={styles.partName}>{part.partName}</div>
                                        <div className={styles.partCode}>–ö–æ–¥: {part.partCode}</div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                ) : (
                    <div className={styles.noPartsSection}>
                        <div className={styles.noPartsIcon}>üìã</div>
                        <h3 className={styles.noPartsTitle}>–î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</h3>
                        <p className={styles.noPartsDescription}>
                            –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏.
                        </p>
                    </div>
                )} */}
            </div>
        </div>
    );
};

export default RouteDetails;