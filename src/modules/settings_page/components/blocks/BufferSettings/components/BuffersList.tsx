import React, { useState } from 'react';
import { BufferResponse } from '../types/buffers.types';
import { useBuffers, useDeleteBuffer, useCopyBuffer } from '../hooks/useBuffersQuery';

import styles from './BuffersList.module.css';

interface BuffersListProps {
  onSelectBuffer?: (buffer: BufferResponse) => void;
  onEditBuffer?: (bufferId: number) => void; 
  onBufferDeleted?: (bufferId: number) => void;
  selectedBufferId?: number;
}

const BuffersList: React.FC<BuffersListProps> = ({
  onSelectBuffer,
  onEditBuffer,
  onBufferDeleted,
  selectedBufferId
}) => {
  const [copyingBufferId, setCopyingBufferId] = useState<number | null>(null);
  const [copyFormData, setCopyFormData] = useState({
    newBufferName: '',
    newLocation: '',
    copyCells: true,
    copyStages: true
  });

  const { data: buffers = [], isLoading, error } = useBuffers();
  const deleteBufferMutation = useDeleteBuffer();
  const copyBufferMutation = useCopyBuffer();



  const handleDeleteBuffer = async (bufferId: number, bufferName: string) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±—É—Ñ–µ—Ä "${bufferName}"?`)) {
      try {
        await deleteBufferMutation.mutateAsync(bufferId);
        onBufferDeleted?.(bufferId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞');
      }
    }
  };

  const handleCopyBuffer = (bufferId: number, bufferName: string) => {
    setCopyingBufferId(bufferId);
    setCopyFormData({
      newBufferName: `${bufferName} (–∫–æ–ø–∏—è)`,
      newLocation: '',
      copyCells: true,
      copyStages: true
    });
  };

  const handleConfirmCopy = async () => {
    if (!copyingBufferId) return;

    try {
      await copyBufferMutation.mutateAsync({
        id: copyingBufferId,
        data: copyFormData
      });
      setCopyingBufferId(null);
      setCopyFormData({
        newBufferName: '',
        newLocation: '',
        copyCells: true,
        copyStages: true
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞');
    }
  };

  const handleCancelCopy = () => {
    setCopyingBufferId(null);
    setCopyFormData({
      newBufferName: '',
      newLocation: '',
      copyCells: true,
      copyStages: true
    });
  };

  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.spinner}></div>
        –ó–∞–≥—Ä—É–∑–∫–∞ –±—É—Ñ–µ—Ä–æ–≤...
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.errorContainer}>
        <div className={styles.emptyStateIcon}>‚ö†Ô∏è</div>
        <div className={styles.emptyStateTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
        <div className={styles.emptyStateDescription}>
          –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–æ–≤
        </div>
      </div>
    );
  }

  if (buffers.length === 0) {
    return (
      <div className={styles.emptyState}>
        <div className={styles.emptyStateIcon}>üì¶</div>
        <div className={styles.emptyStateTitle}>–ëÔøΩÔøΩ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
        <div className={styles.emptyStateDescription}>
          –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h3 className={styles.title}>–ë—É—Ñ–µ—Ä—ã</h3>
        <div className={styles.stats}>
          –í—Å–µ–≥–æ: {buffers.length}
        </div>
      </div>

      <div className={styles.list}>
        {buffers.map((buffer) => (
          <div
            key={buffer.bufferId}
            className={`${styles.item} ${
              selectedBufferId === buffer.bufferId ? styles.selected : ''
            }`}
            onClick={() => onSelectBuffer?.(buffer)}
          >
            <div className={styles.itemContent}>
              <div className={styles.itemHeader}>
                <h4 className={styles.itemTitle}>{buffer.bufferName}</h4>
                <div className={styles.itemActions}>
                  <button
                    className={`${styles.actionButton} ${styles.editButton}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      onEditBuffer?.(buffer.bufferId);
                    }}
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    className={`${styles.actionButton} ${styles.copyButton}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleCopyBuffer(buffer.bufferId, buffer.bufferName);
                    }}
                    title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    üìã
                  </button>
                  <button
                    className={`${styles.actionButton} ${styles.deleteButton}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteBuffer(buffer.bufferId, buffer.bufferName);
                    }}
                    title="–£–¥–∞–ª–∏—Ç—å"
                    disabled={deleteBufferMutation.isPending}
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
              
              <div className={styles.itemDetails}>
                <div className={styles.location}>
                  üìç {buffer.location}
                </div>
                {buffer.description && (
                  <div className={styles.description}>
                    {buffer.description}
                  </div>
                )}
                <div className={styles.itemStats}>
                  <span className={styles.statBadge}>
                    –Ø—á–µ–µ–∫: {buffer.cellsCount}
                  </span>
                  <span className={styles.statBadge}>
                    –≠—Ç–∞–ø–æ–≤: {buffer.stagesCount}
                  </span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Copy Modal */}
      {copyingBufferId && (
        <div className={styles.modalOverlay} onClick={handleCancelCopy}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <div className={styles.modalHeader}>
              <h3>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞</h3>
            </div>
            
            <div className={styles.modalBody}>
              <div className={styles.field}>
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞:</label>
                <input
                  type="text"
                  value={copyFormData.newBufferName}
                  onChange={(e) => setCopyFormData(prev => ({
                    ...prev,
                    newBufferName: e.target.value
                  }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                />
              </div>
              
              <div className={styles.field}>
                <label>–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</label>
                <input
                  type="text"
                  value={copyFormData.newLocation}
                  onChange={(e) => setCopyFormData(prev => ({
                    ...prev,
                    newLocation: e.target.value
                  }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                />
              </div>

              <div className={styles.checkboxGroup}>
                <label className={styles.checkboxLabel}>
                  <input
                    type="checkbox"
                    checked={copyFormData.copyCells}
                    onChange={(e) => setCopyFormData(prev => ({
                      ...prev,
                      copyCells: e.target.checked
                    }))}
                  />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫–∏
                </label>
                
                <label className={styles.checkboxLabel}>
                  <input
                    type="checkbox"
                    checked={copyFormData.copyStages}
                    onChange={(e) => setCopyFormData(prev => ({
                      ...prev,
                      copyStages: e.target.checked
                    }))}
                  />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–ø—ã
                </label>
              </div>
            </div>

            <div className={styles.modalActions}>
              <button
                className={`${styles.button} ${styles.buttonPrimary}`}
                onClick={handleConfirmCopy}
                disabled={!copyFormData.newBufferName || copyBufferMutation.isPending}
              >
                {copyBufferMutation.isPending ? '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
              </button>
              <button
                className={`${styles.button} ${styles.buttonSecondary}`}
                onClick={handleCancelCopy}
                disabled={copyBufferMutation.isPending}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BuffersList;