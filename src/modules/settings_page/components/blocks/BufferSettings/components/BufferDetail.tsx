import React, { useState } from 'react';
import { BufferResponse, CellStatus, BufferCellResponse, UpdateBufferCellDto } from '../types/buffers.types';
import { 
  useBuffer, 
  useBufferCells, 
  useBufferCellsStatistics,
  useUpdateBufferCell,
  useDeleteBufferCell,
  useCreateBufferCell
} from '../hooks/useBuffersQuery';
import styles from './BufferDetail.module.css';

interface BufferDetailProps {
  selectedBuffer?: BufferResponse | null;
  onBufferUpdated?: (buffer: BufferResponse) => void;
}

interface EditCellForm {
  cellCode: string;
  capacity: number;
  currentLoad: number;
  status: CellStatus;
}

const BufferDetail: React.FC<BufferDetailProps> = ({
  selectedBuffer,
  onBufferUpdated
}) => {
  const [activeTab, setActiveTab] = useState<'info' | 'cells' | 'stages'>('info');
  const [newCellForm, setNewCellForm] = useState({
    cellCode: '',
    capacity: 0,
    currentLoad: 0,
    status: CellStatus.AVAILABLE
  });
  const [showNewCellForm, setShowNewCellForm] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏
  const [editingCell, setEditingCell] = useState<BufferCellResponse | null>(null);
  const [editCellForm, setEditCellForm] = useState<EditCellForm>({
    cellCode: '',
    capacity: 0,
    currentLoad: 0,
    status: CellStatus.AVAILABLE
  });
  const [editCellErrors, setEditCellErrors] = useState<Record<string, string>>({});

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - —É–±—Ä–∞–ª –≤—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –æ–ø—Ü–∏—è–º–∏
  const { data: bufferDetail } = useBuffer(selectedBuffer?.bufferId!);
  const { data: cells } = useBufferCells(selectedBuffer?.bufferId!);
  const { data: cellsStats } = useBufferCellsStatistics(selectedBuffer?.bufferId!);
  
  const updateCellMutation = useUpdateBufferCell();
  const deleteCellMutation = useDeleteBufferCell();
  const createCellMutation = useCreateBufferCell();

  if (!selectedBuffer) {
    return (
      <div className={styles.emptyState}>
        <div className={styles.emptyStateIcon}>üì¶</div>
        <div className={styles.emptyStateTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ñ–µ—Ä</div>
        <div className={styles.emptyStateDescription}>
          –í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ñ–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        </div>
      </div>
    );
  }

  const handleCellStatusChange = async (cellId: number, status: CellStatus) => {
    try {
      await updateCellMutation.mutateAsync({
        cellId,
        bufferId: selectedBuffer.bufferId,
        data: { status }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —è—á–µ–π–∫–∏:', error);
    }
  };

  const handleDeleteCell = async (cellId: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —è—á–µ–π–∫—É?')) {
      try {
        await deleteCellMutation.mutateAsync({
          cellId,
          bufferId: selectedBuffer.bufferId
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏:', error);
      }
    }
  };

  const handleCreateCell = async () => {
    if (!newCellForm.cellCode.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è—á–µ–π–∫–∏');
      return;
    }

    if (newCellForm.capacity <= 0) {
      alert('–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    if (newCellForm.currentLoad < 0 || newCellForm.currentLoad > newCellForm.capacity) {
      alert('–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
      return;
    }

    try {
      await createCellMutation.mutateAsync({
        bufferId: selectedBuffer.bufferId,
        data: newCellForm
      });
      setNewCellForm({
        cellCode: '',
        capacity: 0,
        currentLoad: 0,
        status: CellStatus.AVAILABLE
      });
      setShowNewCellForm(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏
  const handleEditCell = (cell: BufferCellResponse) => {
    setEditingCell(cell);
    setEditCellForm({
      cellCode: cell.cellCode,
      capacity: cell.capacity,
      currentLoad: cell.currentLoad,
      status: cell.status
    });
    setEditCellErrors({});
  };

  const validateEditCellForm = (): boolean => {
    const errors: Record<string, string> = {};

    if (!editCellForm.cellCode.trim()) {
      errors.cellCode = '–ö–æ–¥ —è—á–µ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (editCellForm.cellCode.length > 20) {
      errors.cellCode = '–ö–æ–¥ —è—á–µ–π–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (editCellForm.capacity <= 0) {
      errors.capacity = '–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }

    if (editCellForm.currentLoad < 0) {
      errors.currentLoad = '–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π';
    }

    if (editCellForm.currentLoad > editCellForm.capacity) {
      errors.currentLoad = '–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å';
    }

    setEditCellErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleUpdateCell = async () => {
    if (!validateEditCellForm() || !editingCell) return;

    try {
      const updateData: UpdateBufferCellDto = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      if (editCellForm.cellCode !== editingCell.cellCode) {
        updateData.cellCode = editCellForm.cellCode;
      }
      if (editCellForm.capacity !== editingCell.capacity) {
        updateData.capacity = editCellForm.capacity;
      }
      if (editCellForm.currentLoad !== editingCell.currentLoad) {
        updateData.currentLoad = editCellForm.currentLoad;
      }
      if (editCellForm.status !== editingCell.status) {
        updateData.status = editCellForm.status;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      if (Object.keys(updateData).length === 0) {
        setEditingCell(null);
        return;
      }

      await updateCellMutation.mutateAsync({
        cellId: editingCell.cellId,
        bufferId: selectedBuffer.bufferId,
        data: updateData
      });

      setEditingCell(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏');
    }
  };

  const handleCancelEditCell = () => {
    setEditingCell(null);
    setEditCellErrors({});
  };

  const getStatusColor = (status: CellStatus) => {
    switch (status) {
      case CellStatus.AVAILABLE:
        return '#10b981';
      case CellStatus.OCCUPIED:
        return '#f59e0b';
      case CellStatus.RESERVED:
        return '#ef4444';
      default:
        return '#6b7280';
    }
  };

  const getStatusText = (status: CellStatus) => {
    switch (status) {
      case CellStatus.AVAILABLE:
        return '–î–æ—Å—Ç—É–ø–Ω–∞';
      case CellStatus.OCCUPIED:
        return '–ó–∞–Ω—è—Ç–∞';
      case CellStatus.RESERVED:
        return '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞';
      default:
        return status;
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <div className={styles.headerContent}>
          <h3 className={styles.title}>{selectedBuffer.bufferName}</h3>
          <div className={styles.subtitle}>
            <span className={styles.location}>üìç {selectedBuffer.location}</span>
            {selectedBuffer.description && (
              <span className={styles.description}>{selectedBuffer.description}</span>
            )}
          </div>
        </div>
      </div>

      <div className={styles.tabs}>
        <button
          className={`${styles.tab} ${activeTab === 'info' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('info')}
        >
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        </button>
        <button
          className={`${styles.tab} ${activeTab === 'cells' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('cells')}
        >
          –Ø—á–µ–π–∫–∏ ({selectedBuffer.cellsCount})
        </button>
        <button
          className={`${styles.tab} ${activeTab === 'stages' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('stages')}
        >
          –≠—Ç–∞–ø—ã ({selectedBuffer.stagesCount})
        </button>
      </div>

      <div className={styles.content}>
        {activeTab === 'info' && (
          <div className={styles.tabContent}>
            <div className={styles.infoGrid}>
              <div className={styles.infoCard}>
                <h4>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <div className={styles.infoList}>
                  <div className={styles.infoItem}>
                    <span className={styles.infoLabel}>ID –±—É—Ñ–µ—Ä–∞:</span>
                    <span className={styles.infoValue}>{selectedBuffer.bufferId}</span>
                  </div>
                  <div className={styles.infoItem}>
                    <span className={styles.infoLabel}>–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
                    <span className={styles.infoValue}>{selectedBuffer.bufferName}</span>
                  </div>
                  <div className={styles.infoItem}>
                    <span className={styles.infoLabel}>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</span>
                    <span className={styles.infoValue}>{selectedBuffer.location}</span>
                  </div>
                  <div className={styles.infoItem}>
                    <span className={styles.infoLabel}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫:</span>
                    <span className={styles.infoValue}>{selectedBuffer.cellsCount}</span>
                  </div>
                  <div className={styles.infoItem}>
                    <span className={styles.infoLabel}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤:</span>
                    <span className={styles.infoValue}>{selectedBuffer.stagesCount}</span>
                  </div>
                  {selectedBuffer.description && (
                    <div className={styles.infoItem}>
                      <span className={styles.infoLabel}>–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                      <span className={styles.infoValue}>{selectedBuffer.description}</span>
                    </div>
                  )}
                </div>
              </div>

              {cellsStats && (
                <div className={styles.infoCard}>
                  <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—á–µ–µ–∫</h4>
                  <div className={styles.statsGrid}>
                    <div className={styles.statItem}>
                      <span className={styles.statValue}>{cellsStats.totalCells}</span>
                      <span className={styles.statLabel}>–í—Å–µ–≥–æ —è—á–µ–µ–∫</span>
                    </div>
                    <div className={styles.statItem}>
                      <span className={styles.statValue}>{cellsStats.availableCells}</span>
                      <span className={styles.statLabel}>–î–æ—Å—Ç—É–ø–Ω–æ</span>
                    </div>
                    <div className={styles.statItem}>
                      <span className={styles.statValue}>{cellsStats.occupiedCells}</span>
                      <span className={styles.statLabel}>–ó–∞–Ω—è—Ç–æ</span>
                    </div>
                    <div className={styles.statItem}>
                      <span className={styles.statValue}>{cellsStats.reservedCells}</span>
                      <span className={styles.statLabel}>–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ</span>
                    </div>
                    <div className={styles.statItem}>
                      <span className={styles.statValue}>{cellsStats.totalCapacity}</span>
                      <span className={styles.statLabel}>–û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</span>
                    </div>
                    <div className={styles.statItem}>
                      <span className={styles.statValue}>{cellsStats.utilizationPercentage.toFixed(1)}%</span>
                      <span className={styles.statLabel}>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'cells' && (
          <div className={styles.tabContent}>
            <div className={styles.sectionHeader}>
              <h4>–Ø—á–µ–π–∫–∏ –±—É—Ñ–µ—Ä–∞</h4>
              <button
                className={`${styles.button} ${styles.buttonPrimary}`}
                onClick={() => setShowNewCellForm(!showNewCellForm)}
              >
                {showNewCellForm ? '–û—Ç–º–µ–Ω–∞' : '+ –î–æ–±–∞–≤–∏—Ç—å —è—á–µ–π–∫—É'}
              </button>
            </div>

            {showNewCellForm && (
              <div className={styles.cellForm}>
                <h5>–ù–æ–≤–∞—è —è—á–µ–π–∫–∞</h5>
                <div className={styles.cellFormGrid}>
                  <div className={styles.field}>
                    <label>–ö–æ–¥ —è—á–µ–π–∫–∏</label>
                    <input
                      type="text"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è—á–µ–π–∫–∏"
                      value={newCellForm.cellCode}
                      onChange={(e) => setNewCellForm(prev => ({ ...prev, cellCode: e.target.value }))}
                    />
                  </div>
                  <div className={styles.field}>
                    <label>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</label>
                    <input
                      type="number"
                      placeholder="0"
                      value={newCellForm.capacity}
                      onChange={(e) => setNewCellForm(prev => ({ ...prev, capacity: Number(e.target.value) }))}
                      min="1"
                    />
                  </div>
                  <div className={styles.field}>
                    <label>–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</label>
                    <input
                      type="number"
                      placeholder="0"
                      value={newCellForm.currentLoad}
                      onChange={(e) => setNewCellForm(prev => ({ ...prev, currentLoad: Number(e.target.value) }))}
                      min="0"
                      max={newCellForm.capacity}
                    />
                  </div>
                  <div className={styles.field}>
                    <label>–°—Ç–∞—Ç—É—Å</label>
                    <select
                      value={newCellForm.status}
                      onChange={(e) => setNewCellForm(prev => ({ ...prev, status: e.target.value as CellStatus }))}
                    >
                      <option value={CellStatus.AVAILABLE}>–î–æ—Å—Ç—É–ø–Ω–∞</option>
                      <option value={CellStatus.OCCUPIED}>–ó–∞–Ω—è—Ç–∞</option>
                      <option value={CellStatus.RESERVED}>–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞</option>
                    </select>
                  </div>
                </div>
                <div className={styles.cellFormActions}>
                  <button 
                    onClick={handleCreateCell} 
                    className={`${styles.button} ${styles.buttonPrimary}`}
                    disabled={createCellMutation.isPending}
                  >
                    {createCellMutation.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
                  </button>
                </div>
              </div>
            )}

            <div className={styles.cellsGrid}>
              {cells?.map((cell) => (
                <div key={cell.cellId} className={styles.cellCard}>
                  <div className={styles.cellHeader}>
                    <span className={styles.cellCode}>{cell.cellCode}</span>
                    <div
                      className={styles.statusBadge}
                      style={{ backgroundColor: getStatusColor(cell.status) }}
                    >
                      {getStatusText(cell.status)}
                    </div>
                  </div>
                  
                  <div className={styles.cellInfo}>
                    <div className={styles.cellInfoItem}>
                      <span>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</span>
                      <span>{cell.capacity}</span>
                    </div>
                    <div className={styles.cellInfoItem}>
                      <span>–ó–∞–≥—Ä—É–∑–∫–∞:</span>
                      <span>{cell.currentLoad}</span>
                    </div>
                    <div className={styles.cellInfoItem}>
                      <span>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å:</span>
                      <span>{cell.capacity > 0 ? ((cell.currentLoad / cell.capacity) * 100).toFixed(1) : '0'}%</span>
                    </div>
                  </div>

                  <div className={styles.cellActions}>
                    <select
                      value={cell.status}
                      onChange={(e) => handleCellStatusChange(cell.cellId, e.target.value as CellStatus)}
                      className={styles.statusSelect}
                      disabled={updateCellMutation.isPending}
                    >
                      <option value={CellStatus.AVAILABLE}>–î–æ—Å—Ç—É–ø–Ω–∞</option>
                      <option value={CellStatus.OCCUPIED}>–ó–∞–Ω—è—Ç–∞</option>
                      <option value={CellStatus.RESERVED}>–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞</option>
                    </select>
                    
                    <button
                      className={styles.editButton}
                      onClick={() => handleEditCell(cell)}
                      disabled={updateCellMutation.isPending}
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É"
                    >
                      ‚úèÔ∏è
                    </button>
                    
                    <button
                      className={styles.deleteButton}
                      onClick={() => handleDeleteCell(cell.cellId)}
                      disabled={deleteCellMutation.isPending}
                      title="–£–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
            </div>

            {(!cells || cells.length === 0) && (
              <div className={styles.emptyCells}>
                <div className={styles.emptyIcon}>üì¶</div>
                <div className={styles.emptyTitle}>–ù–µ—Ç —è—á–µ–µ–∫</div>
                <div className={styles.emptyDescription}>
                  –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –±—É—Ñ–µ—Ä–∞
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'stages' && (
          <div className={styles.tabContent}>
            <div className={styles.sectionHeader}>
              <h4>–°–≤—è–∑–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã</h4>
            </div>

            <div className={styles.stagesGrid}>
              {bufferDetail?.bufferStages?.map((bufferStage) => (
                <div key={bufferStage.bufferStageId} className={styles.stageCard}>
                  <div className={styles.stageContent}>
                    <h5 className={styles.stageName}>{bufferStage.stage.stageName}</h5>
                    {bufferStage.stage.description && (
                      <p className={styles.stageDescription}>{bufferStage.stage.description}</p>
                    )}
                  </div>
                  <div className={styles.stageId}>
                    ID: {bufferStage.stage.stageId}
                  </div>
                </div>
              ))}
            </div>

            {(!bufferDetail?.bufferStages || bufferDetail.bufferStages.length === 0) && (
              <div className={styles.emptyStages}>
                <div className={styles.emptyIcon}>üîÑ</div>
                <div className={styles.emptyTitle}>–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤</div>
                <div className={styles.emptyDescription}>
                  –≠—Ç–æ—Ç –±—É—Ñ–µ—Ä –Ω–µ —Å–≤—è–∑–∞–Ω –Ω–∏ —Å –æ–¥–Ω–∏–º —ç—Ç–∞–ø–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏ */}
      {editingCell && (
        <div className={styles.modal}>
          <div className={styles.modalContent}>
            <div className={styles.modalHeader}>
              <h4>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏: {editingCell.cellCode}</h4>
              <button 
                className={styles.modalClose}
                onClick={handleCancelEditCell}
              >
                ‚úï
              </button>
            </div>

            <div className={styles.modalBody}>
              <div className={styles.editCellForm}>
                <div className={styles.field}>
                  <label>–ö–æ–¥ —è—á–µ–π–∫–∏ *</label>
                  <input
                    type="text"
                    value={editCellForm.cellCode}
                    onChange={(e) => setEditCellForm(prev => ({ ...prev, cellCode: e.target.value }))}
                    className={editCellErrors.cellCode ? styles.error : ''}
                    maxLength={20}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è—á–µ–π–∫–∏"
                  />
                  {editCellErrors.cellCode && (
                    <span className={styles.errorText}>{editCellErrors.cellCode}</span>
                  )}
                </div>

                <div className={styles.field}>
                  <label>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å *</label>
                  <input
                    type="number"
                    value={editCellForm.capacity}
                    onChange={(e) => setEditCellForm(prev => ({ ...prev, capacity: Number(e.target.value) }))}
                    className={editCellErrors.capacity ? styles.error : ''}
                    min="1"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
                  />
                  {editCellErrors.capacity && (
                    <span className={styles.errorText}>{editCellErrors.capacity}</span>
                  )}
                </div>

                <div className={styles.field}>
                  <label>–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ *</label>
                  <input
                    type="number"
                    value={editCellForm.currentLoad}
                    onChange={(e) => setEditCellForm(prev => ({ ...prev, currentLoad: Number(e.target.value) }))}
                    className={editCellErrors.currentLoad ? styles.error : ''}
                    min="0"
                    max={editCellForm.capacity}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É"
                  />
                  {editCellErrors.currentLoad && (
                    <span className={styles.errorText}>{editCellErrors.currentLoad}</span>
                  )}
                </div>

                <div className={styles.field}>
                  <label>–°—Ç–∞—Ç—É—Å</label>
                  <select
                    value={editCellForm.status}
                    onChange={(e) => setEditCellForm(prev => ({ ...prev, status: e.target.value as CellStatus }))}
                  >
                    <option value={CellStatus.AVAILABLE}>–î–æ—Å—Ç—É–ø–Ω–∞</option>
                    <option value={CellStatus.OCCUPIED}>–ó–∞–Ω—è—Ç–∞</option>
                    <option value={CellStatus.RESERVED}>–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞</option>
                  </select>
                </div>
              </div>
            </div>

            <div className={styles.modalActions}>
              <button
                type="button"
                onClick={handleCancelEditCell}
                disabled={updateCellMutation.isPending}
                className={`${styles.button} ${styles.buttonSecondary}`}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="button"
                onClick={handleUpdateCell}
                disabled={updateCellMutation.isPending}
                className={`${styles.button} ${styles.buttonPrimary}`}
              >
                {updateCellMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BufferDetail;