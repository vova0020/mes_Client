import React, { useState, useEffect } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BufferResponse, BufferDetailResponse } from './types/buffers.types';
import BuffersList from './components/BuffersList';
import BufferForm from './components/BufferForm';
import BufferDetail from './components/BufferDetail';
import { useBuffersStatistics } from './hooks/useBuffersQuery';
import styles from './BufferSettings.module.css';

// –°–æ–∑–¥–∞–µ–º Query Client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç
      refetchOnWindowFocus: false,
    },
    mutations: {
      retry: 0,
    },
  },
});

const BufferSettingsContent: React.FC = () => {
  const [selectedBuffer, setSelectedBuffer] = useState<BufferResponse | null>(null);
  const [editBufferId, setEditBufferId] = useState<number>();
  const [showForm, setShowForm] = useState(false);



  const { 
    data: statistics, 
    isLoading: statisticsLoading, 
    error: statisticsError 
  } = useBuffersStatistics();

  const handleSelectBuffer = (buffer: BufferResponse) => {
    console.log('[BufferSettings] –í—ã–±—Ä–∞–Ω –±—É—Ñ–µ—Ä:', buffer);
    setSelectedBuffer(buffer);
  };

  const handleEditBuffer = (bufferId: number) => {
    setEditBufferId(bufferId);
    setShowForm(true);
  };

  const handleCreateBuffer = () => {
    setEditBufferId(undefined);
    setShowForm(true);
  };

  const handleBufferSaved = () => {
    setEditBufferId(undefined);
    setShowForm(false);
    // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è React Query –∏ Socket.IO
  };

  const handleCancelEdit = () => {
    setEditBufferId(undefined);
    setShowForm(false);
  };

  const handleBufferDeleted = (deletedBufferId: number) => {
    // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –±—ã–ª –≤—ã–±—Ä–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    if (selectedBuffer?.bufferId === deletedBufferId) {
      setSelectedBuffer(null);
    }
  };

  // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleBufferUpdated = (updatedBuffer: BufferResponse) => {
    console.log('[BufferSettings] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞:', updatedBuffer);
    if (selectedBuffer?.bufferId === updatedBuffer.bufferId) {
      setSelectedBuffer(updatedBuffer);
    }
  };

  const renderStatistics = () => {
    if (statisticsLoading) {
      return (
        <div className={styles.loadingContainer}>
          <div className={styles.spinner}></div>
          –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
        </div>
      );
    }

    if (statisticsError || !statistics) {
      return null;
    }

    return (
      <div className={styles.statsContainer}>
        <div className={styles.statCard}>
          <div className={styles.statValue}>{statistics.buffers}</div>
          <div className={styles.statLabel}>–ë—É—Ñ–µ—Ä–æ–≤</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statValue}>{statistics.bufferCells}</div>
          <div className={styles.statLabel}>–Ø—á–µ–µ–∫</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statValue}>{statistics.availableCells}</div>
          <div className={styles.statLabel}>–î–æ—Å—Ç—É–ø–Ω–æ</div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statValue}>{statistics.occupiedCells}</div>
          <div className={styles.statLabel}>–ó–∞–Ω—è—Ç–æ</div>
        </div>
      </div>
    );
  };

  return (
    <div className={styles.pageContainer}>


      {/* Header */}
      <div className={styles.pageHeader}>
        <div className={styles.pageHeaderContent}>
          <h1 className={styles.pageTitle}>
            <span className={styles.pageTitleIcon}>üì¶</span>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞–º–∏
          </h1>
          <p className={styles.pageSubtitle}>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É—Ñ–µ—Ä–æ–≤, –∏—Ö —è—á–µ–µ–∫ –∏ —Å–≤—è–∑–µ–π —Å —ç—Ç–∞–ø–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

          </p>
          {renderStatistics()}
        </div>
        <div className={styles.pageHeaderActions}>
          <button
            onClick={handleCreateBuffer}
            className={`${styles.button} ${styles.buttonPrimary} ${styles.buttonLarge}`}
          >
            <span className={styles.buttonIcon}>+</span>
            –°–æ–∑–¥–∞—Ç—å –±—É—Ñ–µ—Ä
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={styles.mainContent}>
        {/* Left Panel - Buffers List */}
        <div className={styles.leftPanel}>
          <BuffersList 
            onSelectBuffer={handleSelectBuffer}
            onEditBuffer={handleEditBuffer}
            onBufferDeleted={handleBufferDeleted}
            selectedBufferId={selectedBuffer?.bufferId}
          />
        </div>

        {/* Right Panel - Buffer Details */}
        <div className={styles.rightPanel}>
          <BufferDetail 
            selectedBuffer={selectedBuffer}
            onBufferUpdated={handleBufferUpdated}
          />
        </div>
      </div>

      {/* Buffer Form Modal */}
      {showForm && (
        <div className={styles.modalOverlay} onClick={handleCancelEdit}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <BufferForm 
              editId={editBufferId} 
              onSaved={handleBufferSaved}
              onCancel={handleCancelEdit}
            />
          </div>
        </div>
      )}
    </div>
  );
};

const BufferSettings: React.FC = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <BufferSettingsContent />
    </QueryClientProvider>
  );
};

export default BufferSettings;