
import React, { useState } from 'react';
import styles from './MachinesCards.module.css';
import useMachines from '../../../hooks/ypakMasterHook/useMachinesMaster';
import TaskSidebar from './components/TaskSidebar/TaskSidebar';

const MachinesCards: React.FC = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω–∫–∞—Ö
  const { machines, loading, error, refreshMachines } = useMachines();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  const [isTaskSidebarOpen, setIsTaskSidebarOpen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∞–Ω–∫–µ
  const [selectedMachine, setSelectedMachine] = useState<{id: number, name: string} | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusClass = (status: string): string => {
    switch (status.toLowerCase()) {
      case 'active':
        return styles.statusActive;
      case 'inactive':
        return styles.statusInactive;
      case 'maintenance':
        return styles.statusMaintenance;
      case 'broken':
        return styles.statusBroken;
      default:
        return '';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const getStatusText = (status: string): string => {
    switch (status.toLowerCase()) {
      case 'active':
        return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'inactive':
        return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      case 'maintenance':
        return '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
      case 'broken':
        return '–°–ª–æ–º–∞–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const calculateCompletionPercentage = (completed: number = 0, planned: number = 1): number => {
    if (planned === 0) return 0;
    return Math.min(Math.round((completed / planned) * 100), 100);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
  const handleOpenTask = (machineId: number, machineName: string) => {
    console.log(`–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machineId}: ${machineName}`);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∞–Ω–∫–µ
    setSelectedMachine({ id: machineId, name: machineName });
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    setIsTaskSidebarOpen(true);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  const handleCloseTaskSidebar = () => {
    setIsTaskSidebarOpen(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
  const renderInactiveOverlay = () => (
    <div className={styles.inactiveOverlay}>
      <div className={styles.inactiveIcon}>‚è∏</div>
      <div className={styles.inactiveMessage}>–°—Ç–∞–Ω–æ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</div>
    </div>
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è —Å—Ç–∞–Ω–∫–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
  const renderMaintenanceOverlay = () => (
    <div className={styles.maintenanceOverlay}>
      <div className={styles.maintenanceIcon}>üîß</div>
      <div className={styles.maintenanceMessage}>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</div>
    </div>
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
  const renderBrokenOverlay = () => (
    <div className={styles.brokenOverlay}>
      <div className={styles.brokenIcon}>‚ö†Ô∏è</div>
      <div className={styles.brokenMessage}>–°—Ç–∞–Ω–æ–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω</div>
    </div>
  );

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
  if (loading) {
    return (
      <div className={styles.detailsContainer}>
        <h2 className={styles.title}>–°–¢–ê–ù–ö–ò</h2>
        <div className={styles.stateContainer}>
          <div className={styles.loadingSpinner}></div>
          <div className={styles.loadingMessage}>
            <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>
          </div>
        </div>
      </div>
    );
  }

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  if (error) {
    return (
      <div className={styles.detailsContainer}>
        <h2 className={styles.title}>–°–¢–ê–ù–ö–ò</h2>
        <div className={styles.stateContainer}>
          <div className={styles.errorIcon}>‚ö†Ô∏è</div>
          <div className={styles.errorMessage}>
            <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p>{error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–Ω–∫–∞—Ö.'}</p>
            <button className={styles.retryButton} onClick={refreshMachines}>
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤
  if (machines.length === 0) {
    return (
      <div className={styles.detailsContainer}>
        <h2 className={styles.title}>–°–¢–ê–ù–ö–ò</h2>
        <div className={styles.stateContainer}>
          <div className={styles.emptyIcon}>üì≠</div>
          <div className={styles.emptyMessage}>
            <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤</h3>
            <p>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.</p>
            <button className={styles.retryButton} onClick={refreshMachines}>
              –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className={styles.detailsContainer}>
        <h2 className={styles.title}>–°–¢–ê–ù–ö–ò</h2>
        
        <div className={styles.tableContainer}>
          <div className={styles.cardsWrapper}>
            {machines.sort((a, b) => a.id - b.id).map(machine => (
              <div 
                key={machine.id} 
                className={styles.machineCard}
                data-status={machine.status.toLowerCase()}
              >
                <div className={styles.cardHeader}>
                  <h3 className={styles.machineName}>{machine.name}</h3>
                  <div className={`${styles.statusIndicator} ${getStatusClass(machine.status)}`}>
                    {getStatusText(machine.status)}
                  </div>
                </div>
                
                <div className={styles.cardBody}>
                  {machine.status.toLowerCase() === 'active' && (
                    <>
                      <div className={styles.infoRow}>
                        <span className={styles.infoLabel}>–ù–æ—Ä–º–∞ –≤—ã—Ä–∞–±–æ—Ç–∫–∏:</span>
                        <span className={styles.infoValue}>{machine.recommendedLoad} —à—Ç.</span>
                      </div>
                      
                      <div className={styles.infoRow}>
                        <span className={styles.infoLabel}>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</span>
                        <span className={styles.infoValue}>{machine.plannedQuantity} —à—Ç.</span>
                      </div>
                      
                      <div className={styles.infoRow}>
                        <span className={styles.infoLabel}>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</span>
                        <span className={styles.infoValue}>
                          {machine.completedQuantity} {machine.load_unit}. ({calculateCompletionPercentage(machine.completedQuantity, machine.recommendedLoad)}%)
                          <div className={styles.progressBar}>
                            <div 
                              className={styles.progressFill}  
                              style={{ width: `${calculateCompletionPercentage(machine.completedQuantity, machine.recommendedLoad)}%` }}
                            />
                          </div>
                        </span>
                      </div>
                    </>
                  )}
                  
                  {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ */}
                  <div className={styles.buttonContainer}>
                    <button 
                      className={styles.openTaskButton}
                      onClick={() => handleOpenTask(machine.id, machine.name)}
                    >
                      –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                    </button>
                  </div>
                  
                  {machine.status.toLowerCase() === 'inactive' && renderInactiveOverlay()}
                  {machine.status.toLowerCase() === 'maintenance' && renderMaintenanceOverlay()}
                  {machine.status.toLowerCase() === 'broken' && renderBrokenOverlay()}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è */}
      {selectedMachine && (
        <TaskSidebar 
          isOpen={isTaskSidebarOpen}
          onClose={handleCloseTaskSidebar}
          machineId={selectedMachine.id}
          machineName={selectedMachine.name}
        />
      )}
    </>
  );
};

export default MachinesCards;
