import { io, Socket } from 'socket.io-client';
import { API_URL } from '../config';
import { Machine } from '../machinNoSmenApi/machineApi';

// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
export enum SocketEvent {
  CONNECT = 'connect',
  DISCONNECT = 'disconnect',
  ERROR = 'connect_error',
  UPDATE_STATUS = 'updateStatus'  // –°–æ–±—ã—Ç–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ websocket.md –∏ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
}

// –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export enum SocketRoom {
  MACHINES_JOIN = 'joinMachinesRoom', // –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  MACHINES = 'machines'               // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
interface SocketHandlers {
  onMachineStatusUpdate?: (machine: Machine) => void;
  onConnect?: () => void;
  onDisconnect?: () => void;
  onError?: (error: Error) => void;
}

class SocketService {
  private socket: Socket | null = null;
  private machineId: number | null = null;
  private handlers: SocketHandlers = {};
  private rooms: Set<string> = new Set();
  private reconnectAttempts: number = 0;
  private maxReconnectAttempts: number = 5;
  private verbose: boolean = true; // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ Socket.IO
   * @returns –ò–Ω—Å—Ç–∞–Ω—Å —Å–æ–∫–µ—Ç–∞
   */
  public initialize(): Socket {
    if (this.socket && this.socket.connected) {
      console.log('Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return this.socket;
    }

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (this.socket) {
      console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Socket.IO');
      this.socket.disconnect();
      this.socket = null;
    }

    this.socket = io(API_URL, {
      transports: ['websocket'],
      autoConnect: true,
      reconnection: true,
      reconnectionAttempts: this.maxReconnectAttempts,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      timeout: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      query: { timestamp: new Date().getTime() } // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    });

    this.setupEventListeners();
    return this.socket;
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
   */
  private setupEventListeners(): void {
    if (!this.socket) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      return;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    if (this.verbose) {
      this.socket.onAny((event, ...args) => {
        console.log(`üîÑ Socket.IO –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${event}`, args);
      });
    }

    // –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∫–µ—Ç–∞
    this.socket.on(SocketEvent.CONNECT, () => {
      console.log('Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.reconnectAttempts = 0;

      // –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º
      this.rejoinRooms();

      if (this.handlers.onConnect) {
        this.handlers.onConnect();
      }
    });

    this.socket.on(SocketEvent.DISCONNECT, () => {
      console.log('Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');

      if (this.handlers.onDisconnect) {
        this.handlers.onDisconnect();
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º
      if (this.reconnectAttempts < this.maxReconnectAttempts) {
        this.reconnectAttempts++;
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
        setTimeout(() => {
          if (!this.socket?.connected) {
            this.initialize();
          }
        }, 2000);
      }
    });

    this.socket.on(SocketEvent.ERROR, (error) => {
      console.error('Socket.IO –æ—à–∏–±–∫–∞:', error);
      if (this.handlers.onError) {
        this.handlers.onError(new Error('–û—à–∏–±–∫–∞ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
      }
    });

    // –°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–Ω–∫–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    this.socket.on(SocketEvent.UPDATE_STATUS, (machine: Machine) => {
      console.log(`üü¢ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–Ω–∫–∞ —á–µ—Ä–µ–∑ Socket.IO (updateStatus): ${JSON.stringify(machine)}`);

      if (!machine || typeof machine !== 'object') {
        console.error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–Ω–∫–∞', machine);
        return;
      }

      if (!machine.id || !machine.status) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞', machine);
        return;
      }

      if (this.handlers.onMachineStatusUpdate) {
        this.handlers.onMachineStatusUpdate(machine);
      } else {
        console.warn('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ onMachineStatusUpdate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    });
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ —Å—Ç–∞–Ω–∫–∞—Ö
   */
  public joinMachinesRoom(): void {
    if (!this.socket) {
      console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      this.initialize();
    }

    if (!this.socket) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Socket.IO');
      return;
    }

    if (this.socket.connected) {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å—Ç–∞–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ:', SocketRoom.MACHINES_JOIN);
      this.socket.emit(SocketRoom.MACHINES_JOIN); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ joinMachinesRoom –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.rooms.add(SocketRoom.MACHINES_JOIN);

      console.log('–ö–æ–º–Ω–∞—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –º—ã –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:', SocketRoom.MACHINES);
    } else {
      console.log('Socket.IO –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      this.rooms.add(SocketRoom.MACHINES_JOIN);

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      if (!this.socket.connected) {
        console.log('–ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
        this.socket.connect();
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ–º–Ω–∞—ÇÔøΩÔøΩ–º
   */
  private rejoinRooms(): void {
    if (!this.socket || !this.socket.connected) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return;
    }

    if (this.rooms.size === 0) {
      console.log('–ù–µ—Ç –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    console.log(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${this.rooms.size} –∫–æ–º–Ω–∞—Ç–∞–º`);

    this.rooms.forEach(room => {
      console.log(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ: ${room}`);
      this.socket?.emit(room);
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   * @param handlers –û–±—ä–µ–∫—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
   */
  public setHandlers(handlers: SocketHandlers): void {
    this.handlers = { ...this.handlers, ...handlers };
    console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:', Object.keys(handlers));
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  public clearHandlers(): void {
    console.log('–û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
    this.handlers = {};
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
   */
  public disconnect(): void {
    if (!this.socket) {
      console.log('Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ');
      return;
    }

    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    this.socket.disconnect();
    this.socket = null;
    this.rooms.clear();
    this.reconnectAttempts = 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  public isConnected(): boolean {
    return !!this.socket?.connected;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  public getStatus(): { connected: boolean, socket: boolean, rooms: string[] } {
    return {
      connected: this.isConnected(),
      socket: !!this.socket,
      rooms: Array.from(this.rooms)
    };
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  public setVerboseLogging(enabled: boolean): void {
    this.verbose = enabled;
    console.log(`–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ${enabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`);
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –∫ —Å–µ—Ä–≤–µ—Ä—É
   */
  public forceReconnect(): void {
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    this.disconnect();
    this.initialize();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const socketService = new SocketService();